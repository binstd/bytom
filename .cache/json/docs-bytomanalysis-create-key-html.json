{"data":{"markdownRemark":{"html":"<p>在前一篇，我们探讨了从浏览器的dashboard中进行注册的时候，密钥、帐户的别名以及密码，是如何从前端传到了后端。在这一篇，我们就要看一下，当比原后台收到了创建密钥的请求之后，将会如何创建。</p>\n<p>由于本文的问题比较具体，所以就不需要再细分，我们直接从代码开始。</p>\n<p>还记得在前一篇中，对应创建密钥的web api的功能点的配置是什么样的吗？</p>\n<p>在<code class=\"gatsby-code-text\">API.buildHandler</code>方法中：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/api/api.go#L164-L244\">api/api.go#L164-L244</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span>API<span class=\"token punctuation\">)</span> <span class=\"token function\">buildHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">if</span> a<span class=\"token punctuation\">.</span>wallet <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n        m<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/create-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">jsonHandler</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>pseudohsmCreateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// ...</span></code></pre>\n      </div>\n<p>可见，其路径为<code class=\"gatsby-code-text\">/create-key</code>，而相应的handler是<code class=\"gatsby-code-text\">a.pseudohsmCreateKey</code>（外面套着的<code class=\"gatsby-code-text\">jsonHandler</code>在之前已经讨论过，这里不提）：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/api/hsm.go#L23-L32\">api/hsm.go#L23-L32</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span>API<span class=\"token punctuation\">)</span> <span class=\"token function\">pseudohsmCreateKey</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> in <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Alias <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"alias\"`</span>\n    Password <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"password\"`</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> Response <span class=\"token punctuation\">{</span>\n    xpub<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> a<span class=\"token punctuation\">.</span>wallet<span class=\"token punctuation\">.</span>Hsm<span class=\"token punctuation\">.</span><span class=\"token function\">XCreate</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">.</span>Alias<span class=\"token punctuation\">,</span> in<span class=\"token punctuation\">.</span>Password<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">NewErrorResponse</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">NewSuccessResponse</span><span class=\"token punctuation\">(</span>xpub<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>它主要是调用了<code class=\"gatsby-code-text\">a.wallet.Hsm.XCreate</code>，让我们跟进去：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/blockchain/pseudohsm/pseudohsm.go#L50-L66\">blockchain/pseudohsm/pseudohsm.go#L50-L66</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token comment\">// XCreate produces a new random xprv and stores it in the db.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">*</span>HSM<span class=\"token punctuation\">)</span> <span class=\"token function\">XCreate</span><span class=\"token punctuation\">(</span>alias <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> auth <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>XPub<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token comment\">// 1.</span>\n    normalizedAlias <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">TrimSpace</span><span class=\"token punctuation\">(</span>alias<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 2.</span>\n    <span class=\"token keyword\">if</span> ok <span class=\"token operator\">:=</span> h<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">hasAlias</span><span class=\"token punctuation\">(</span>normalizedAlias<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> ErrDuplicateKeyAlias\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 3.</span>\n    xpub<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> h<span class=\"token punctuation\">.</span><span class=\"token function\">createChainKDKey</span><span class=\"token punctuation\">(</span>auth<span class=\"token punctuation\">,</span> normalizedAlias<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 4.</span>\n    h<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>xpub<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> xpub<span class=\"token punctuation\">,</span> err\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>其中出现了<code class=\"gatsby-code-text\">HSM</code>这个词，它是指<code class=\"gatsby-code-text\">Hardware-Security-Module</code>，原来比原还预留了跟硬件相关的模块（暂不讨论）。</p>\n<p>上面的代码分成了4部分，分别是：</p>\n<ol>\n<li>首先对传进来的<code class=\"gatsby-code-text\">alias</code>参数进行标准化操作，即去两边空白，并且转换成小写</li>\n<li>检查<code class=\"gatsby-code-text\">cache</code>中有没有，有的话就直接返回并报个相应的错，不会重复生成，因为私钥和别名是一一对应的。在前端可以根据这个错误提醒用户检查或者换一个新的别名。</li>\n<li>调用<code class=\"gatsby-code-text\">createChainKDKey</code>生成相应的密钥，并拿到返回的公钥<code class=\"gatsby-code-text\">xpub</code></li>\n<li>把公钥放入cache中。看起来公钥和别名并不是同一个东西，那前面为什么可以查询alias呢？</li>\n</ol>\n<p>所以我们进入<code class=\"gatsby-code-text\">h.cache.hasAlias</code>看看：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/blockchain/pseudohsm/keycache.go#L76-L84\">blockchain/pseudohsm/keycache.go#L76-L84</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>kc <span class=\"token operator\">*</span>keyCache<span class=\"token punctuation\">)</span> <span class=\"token function\">hasAlias</span><span class=\"token punctuation\">(</span>alias <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n    xpubs <span class=\"token operator\">:=</span> kc<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> xpub <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> xpubs <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> xpub<span class=\"token punctuation\">.</span>Alias <span class=\"token operator\">==</span> alias <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>通过<code class=\"gatsby-code-text\">xpub.Alias</code>我们可以了解到，原来别名跟公钥是绑定的，<code class=\"gatsby-code-text\">alias</code>可以看作是公钥的一个属性（当然也属于相应的私钥）。所以前面把公钥放进cache，之后就可以查询别名了。</p>\n<p>那么第3步中的<code class=\"gatsby-code-text\">createChainKDKey</code>又是如何生成密钥的呢？</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/blockchain/pseudohsm/pseudohsm.go#L68-L86\">blockchain/pseudohsm/pseudohsm.go#L68-L86</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">*</span>HSM<span class=\"token punctuation\">)</span> <span class=\"token function\">createChainKDKey</span><span class=\"token punctuation\">(</span>auth <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> alias <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> get <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>XPub<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 1.</span>\n    xprv<span class=\"token punctuation\">,</span> xpub<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> chainkd<span class=\"token punctuation\">.</span><span class=\"token function\">NewXKeys</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> err\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 2.</span>\n    id <span class=\"token operator\">:=</span> uuid<span class=\"token punctuation\">.</span><span class=\"token function\">NewRandom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    key <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>XKey<span class=\"token punctuation\">{</span>\n        ID<span class=\"token punctuation\">:</span> id<span class=\"token punctuation\">,</span>\n        KeyType<span class=\"token punctuation\">:</span> <span class=\"token string\">\"bytom_kd\"</span><span class=\"token punctuation\">,</span>\n        XPub<span class=\"token punctuation\">:</span> xpub<span class=\"token punctuation\">,</span>\n        XPrv<span class=\"token punctuation\">:</span> xprv<span class=\"token punctuation\">,</span>\n        Alias<span class=\"token punctuation\">:</span> alias<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 3.</span>\n    file <span class=\"token operator\">:=</span> h<span class=\"token punctuation\">.</span>keyStore<span class=\"token punctuation\">.</span><span class=\"token function\">JoinPath</span><span class=\"token punctuation\">(</span><span class=\"token function\">keyFileName</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> h<span class=\"token punctuation\">.</span>keyStore<span class=\"token punctuation\">.</span><span class=\"token function\">StoreKey</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> auth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">Wrap</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> <span class=\"token string\">\"storing keys\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 4.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>XPub<span class=\"token punctuation\">{</span>XPub<span class=\"token punctuation\">:</span> xpub<span class=\"token punctuation\">,</span> Alias<span class=\"token punctuation\">:</span> alias<span class=\"token punctuation\">,</span> File<span class=\"token punctuation\">:</span> file<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>这块代码内容比较清晰，我们可以把它分成4步，分别是：</p>\n<ol>\n<li>调用<code class=\"gatsby-code-text\">chainkd.NewXKeys</code>生成密钥。其中<code class=\"gatsby-code-text\">chainkd</code>对应的是比原代码库中的另一个包<code class=\"gatsby-code-text\">&quot;crypto/ed25519/chainkd&quot;</code>，从名称上来看，使用的是<code class=\"gatsby-code-text\">ed25519</code>算法。如果对前面文章“如何连上一个比原节点”还有印象的话，会记得比原在有新节点连上的时候，就会使用该算法生成一对密钥，用于当次连接进行加密通信。不过需要注意的是，虽然两者都是<code class=\"gatsby-code-text\">ed25519</code>算法，但是上次使用的代码却是来自第三方库<code class=\"gatsby-code-text\">&quot;github.com/tendermint/go-crypto&quot;</code>的。它跟这次的算法在细节上究竟有哪些不同，目前还不清楚，留待以后合适的机会研究。然后是传入<code class=\"gatsby-code-text\">chainkd.NewXKeys(nil)</code>的参数<code class=\"gatsby-code-text\">nil</code>，对应的是“随机数生成器”。如果传的是<code class=\"gatsby-code-text\">nil</code>，<code class=\"gatsby-code-text\">NewXKeys</code>就会在内部使用默认的随机数生成器生成随机数并生成密钥。关于密钥算法相关的内容，在本文中并不探讨。</li>\n<li>给当前密钥生成一个唯一的id，在后面用于生成文件名，保存在硬盘上。id使用的是uuid，生成的是一个形如<code class=\"gatsby-code-text\">62bc9340-f6a7-4d16-86f0-4be61920a06e</code>这样的全球唯一的随机数</li>\n<li>把密钥以文件形式保存在硬盘上。这块内容比较多，下面详细讲。</li>\n<li>把公钥相关信息组合在一起，供调用者使用。</li>\n</ol>\n<p>我们再详细讲一下第3步，把密钥保存成文件。首先是生成文件名，<code class=\"gatsby-code-text\">keyFileName</code>函数对应的代码如下：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/blockchain/pseudohsm/key.go#L96-L101\">blockchain/pseudohsm/key.go#L96-L101</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token comment\">// keyFileName implements the naming convention for keyfiles:</span>\n<span class=\"token comment\">// UTC--&lt;created_at UTC ISO8601>-&lt;address hex></span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">keyFileName</span><span class=\"token punctuation\">(</span>keyAlias <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    ts <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">UTC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTC--%s--%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">toISO8601</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> keyAlias<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>注意这里的参数<code class=\"gatsby-code-text\">keyAlias</code>实际上应该是<code class=\"gatsby-code-text\">keyID</code>，就是前面生成的uuid。写成<code class=\"gatsby-code-text\">alias</code>有点误导，已经提交PR<a href=\"https://github.com/Bytom/bytom/pull/922\">#922</a>。最后生成的文件名，形如：<code class=\"gatsby-code-text\">UTC--2018-05-07T06-20-46.270917000Z--62bc9340-f6a7-4d16-86f0-4be61920a06e</code></p>\n<p>生成文件名之后，会通过<code class=\"gatsby-code-text\">h.keyStore.JoinPath</code>把它放在合适的目录下。通常来说，这个目录是本机数据目录下的<code class=\"gatsby-code-text\">keystore</code>，如果你是OSX系统，它应该在你的<code class=\"gatsby-code-text\">~/Library/Bytom/keystore</code>，如果是别的，你可以通过下面的代码来确定<a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/config/config.go#L190-L205\">DefaultDataDir()</a></p>\n<p>关于上面的保存密钥文件的目录，到底是怎么确定的，在代码中其实是有点绕的。不过如果你对这感兴趣的话，我相信你应该能自行找到，这里就不列出来了。如果找不到的话，可以试试以下关键字：<code class=\"gatsby-code-text\">pseudohsm.New(config.KeysDir())</code>, <code class=\"gatsby-code-text\">os.ExpandEnv(config.DefaultDataDir())</code>, <code class=\"gatsby-code-text\">DefaultDataDir()</code>，<code class=\"gatsby-code-text\">DefaultBaseConfig()</code></p>\n<p>在第3步的最后，会调用<code class=\"gatsby-code-text\">keyStore.StoreKey</code>方法，把它保存成文件。该方法代码如下：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/blockchain/pseudohsm/keystore_passphrase.go#L67-L73\">blockchain/pseudohsm/keystore_passphrase.go#L67-L73</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>ks keyStorePassphrase<span class=\"token punctuation\">)</span> <span class=\"token function\">StoreKey</span><span class=\"token punctuation\">(</span>filename <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> key <span class=\"token operator\">*</span>XKey<span class=\"token punctuation\">,</span> auth <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    keyjson<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">EncryptKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> auth<span class=\"token punctuation\">,</span> ks<span class=\"token punctuation\">.</span>scryptN<span class=\"token punctuation\">,</span> ks<span class=\"token punctuation\">.</span>scryptP<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> err\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">writeKeyFile</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> keyjson<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><code class=\"gatsby-code-text\">EncryptKey</code>里做了很多事情，把传进来的密钥及其它信息利用起来生成了JSON格式的信息，然后通过<code class=\"gatsby-code-text\">writeKeyFile</code>把它保存硬盘上。所以在你的<code class=\"gatsby-code-text\">keystore</code>目录下，会看到属于你的密钥文件。它们很重要，千万别误删了。</p>\n<p><code class=\"gatsby-code-text\">a.wallet.Hsm.XCreate</code>看完了，让我们回到<code class=\"gatsby-code-text\">a.pseudohsmCreateKey</code>方法的最后一部分。可以看到，当成功生成key之后，会返回一个<code class=\"gatsby-code-text\">NewSuccessResponse(xpub)</code>，把与公钥相关的信息返回给前端。它会被<code class=\"gatsby-code-text\">jsonHandler</code>自动转换成JSON格式，通过http返回过去。</p>\n<p>在这次的问题中，我们主要研究的是比原在通过web api接口<code class=\"gatsby-code-text\">/create-key</code>接收到请求后，在内部做了哪些事，以及把密钥文件放在了哪里。其中涉及到密钥的算法（如<code class=\"gatsby-code-text\">ed25519</code>）会在以后的文章中，进行详细的讨论。</p>\n<hr>\n<p>如果你觉得这些文章对你非常有用，控制不住想打赏作者，可以有以下选择：</p>\n<ol>\n<li>BTM: <code class=\"gatsby-code-text\">0x6bcCfb7265d4aB0C1a71F7d19b9E581cae73D777</code></li>\n<li>BTC: <code class=\"gatsby-code-text\">1Af2Q23Y1kqgtgbryzjS7RxrnEmyvYuX4b</code></li>\n<li>ETH: <code class=\"gatsby-code-text\">0x6bcCfb7265d4aB0C1a71F7d19b9E581cae73D777</code></li>\n</ol>\n<p>多少请随意，心意最重要，我们一起努力吧！</p>","frontmatter":{"title":"通过`/create-key`接口创建密钥","next":null,"prev":null},"fields":{"path":null,"slug":"docs/bytomanalysis-create-key.html"}}},"pathContext":{"slug":"docs/bytomanalysis-create-key.html"}}