{"data":{"markdownRemark":{"html":"<p>我们知道，在使用<code class=\"gatsby-code-text\">bytomd init --chain_id mainnet/testnet/solonet</code>初始化比原的时候，它会根据给定的<code class=\"gatsby-code-text\">chain_id</code>的不同，使用不同的端口(参看<a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/config/toml.go#L29-L45\">config/toml.go#L29</a>)：</p>\n<ol>\n<li><code class=\"gatsby-code-text\">mainnet</code>（连接到主网）: <code class=\"gatsby-code-text\">46657</code></li>\n<li><code class=\"gatsby-code-text\">testnet</code>（连接到测试网）: <code class=\"gatsby-code-text\">46656</code></li>\n<li><code class=\"gatsby-code-text\">solonet</code>（本地单独节点）: <code class=\"gatsby-code-text\">46658</code></li>\n</ol>\n<p>对于我来说，由于只需要对本地运行的一个比原节点进行分析，所以可以采用第3个<code class=\"gatsby-code-text\">chain_id</code>，即<code class=\"gatsby-code-text\">solonet</code>。这样它启动之后，不会与其它的节点主动连接，可以减少其它节点对于我们的干扰。</p>\n<p>所以在启动的时候，我的命令是这样的：</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">cd cmd/bytomd\n./bytomd init --chain_id solonet\n./bytomd node</code></pre>\n      </div>\n<p>它就会监听<code class=\"gatsby-code-text\">46658</code>端口，等待其它节点的连接。</p>\n<h3 id=\"连上看看\"><a href=\"#%E8%BF%9E%E4%B8%8A%E7%9C%8B%E7%9C%8B\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>连上看看</h3>\n<p>如果这时我们使用<code class=\"gatsby-code-text\">telnet</code>来连接其<code class=\"gatsby-code-text\">46658</code>端口，成功连接上之后，可以看到它会发给我们一些乱码，大概如下：</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">$ telnet localhost 46658\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is &#39;^]&#39;.\nט�S��%�z?��_�端��݂���U[e</code></pre>\n      </div>\n<p>我们也许会好奇，它发给我们的到底是什么？</p>\n<p>但是这个问题留待下次回答，因为首先，比原节点必须能够监听这个端口，我们才能连上。所以这次我们的问题是：</p>\n<h2 id=\"比原在代码中是如何监听这个端口的\"><a href=\"#%E6%AF%94%E5%8E%9F%E5%9C%A8%E4%BB%A3%E7%A0%81%E4%B8%AD%E6%98%AF%E5%A6%82%E4%BD%95%E7%9B%91%E5%90%AC%E8%BF%99%E4%B8%AA%E7%AB%AF%E5%8F%A3%E7%9A%84\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>比原在代码中是如何监听这个端口的?</h2>\n<h3 id=\"端口已经写在configtoml中\"><a href=\"#%E7%AB%AF%E5%8F%A3%E5%B7%B2%E7%BB%8F%E5%86%99%E5%9C%A8configtoml%E4%B8%AD\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>端口已经写在<code class=\"gatsby-code-text\">config.toml</code>中</h3>\n<p>在前面，当我们使用<code class=\"gatsby-code-text\">./bytomd init --chain_id solonet</code>初始化比原以后，比原会在本地的数据目录中生成一个<code class=\"gatsby-code-text\">config.toml</code>的配置文件，内容大约如下：</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-ini\"><code class=\"gatsby-code-ini\"># This is a TOML config file.\n# For more information, see https://github.com/toml-lang/toml\n<span class=\"token constant\">fast_sync</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> true</span>\n<span class=\"token constant\">db_backend</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> \"leveldb\"</span>\n<span class=\"token constant\">api_addr</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> \"0.0.0.0:9888\"</span>\n<span class=\"token constant\">chain_id</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> \"solonet\"</span>\n<span class=\"token selector\">[p2p]</span>\n<span class=\"token constant\">laddr</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> \"tcp://0.0.0.0:46658\"</span>\n<span class=\"token constant\">seeds</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> \"\"</span></code></pre>\n      </div>\n<p>其中<code class=\"gatsby-code-text\">[p2p]</code>下面的<code class=\"gatsby-code-text\">laddr</code>，就是该节点监听的地址和端口。</p>\n<p>对于<code class=\"gatsby-code-text\">laddr = &quot;tcp://0.0.0.0:46658&quot;</code>，它是意思是：</p>\n<ol>\n<li>使用的是<code class=\"gatsby-code-text\">tcp</code>协议</li>\n<li>监听的ip是<code class=\"gatsby-code-text\">0.0.0.0</code>，是指监听本机所有ip地址。这样该节点既允许本地访问，也允许外部主机访问。如果你只想让它监听某一个ip，手动修改该配置文件即可</li>\n<li><code class=\"gatsby-code-text\">46658</code>，就是我们在这个问题中关注的端口了，它与该节点与其它节点交互数据使用的端口</li>\n</ol>\n<p>比原在监听这个端口的时候，并不是如我最开始预期的直接调用<code class=\"gatsby-code-text\">net.Listen</code>监听它。实际的过程要比这个复杂，因为比原设计了一个叫<code class=\"gatsby-code-text\">Switch</code>的对象，用来统一管理与外界相关的事件，包括监听、连接、发送消息等。而<code class=\"gatsby-code-text\">Switch</code>这个对象，又是在<code class=\"gatsby-code-text\">SyncManager</code>中创建的。</p>\n<h3 id=\"启动直到进入switch\"><a href=\"#%E5%90%AF%E5%8A%A8%E7%9B%B4%E5%88%B0%E8%BF%9B%E5%85%A5switch\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>启动直到进入<code class=\"gatsby-code-text\">Switch</code></h3>\n<p>所以我们首先需要知道，比原在源代码中是如何启动，并且一步步走进了<code class=\"gatsby-code-text\">Switch</code>的世界。</p>\n<p>首先还是当我们<code class=\"gatsby-code-text\">bytomd node</code>启动比原时，对应的入口函数如下：</p>\n<p><a href=\"https://github.com/freewind/bytom/blob/master/cmd/bytomd/main.go#L54\">cmd/bytomd/main.go#L54</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cmd <span class=\"token operator\">:=</span> cli<span class=\"token punctuation\">.</span><span class=\"token function\">PrepareBaseCmd</span><span class=\"token punctuation\">(</span>commands<span class=\"token punctuation\">.</span>RootCmd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"TM\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">ExpandEnv</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">DefaultDataDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>它又会根据传入的<code class=\"gatsby-code-text\">node</code>参数，运行下面的函数：</p>\n<p><a href=\"https://github.com/freewind/bytom/blob/master/cmd/bytomd/commands/run_node.go#L41\">cmd/bytomd/commands/run_node.go#L41</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">runNode</span><span class=\"token punctuation\">(</span>cmd <span class=\"token operator\">*</span>cobra<span class=\"token punctuation\">.</span>Command<span class=\"token punctuation\">,</span> args <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Create &amp; start node</span>\n    n <span class=\"token operator\">:=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">NewNode</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>我们需要关注的是<code class=\"gatsby-code-text\">node.NewNode(config)</code>函数，因为是在它里面创建了<code class=\"gatsby-code-text\">SyncManager</code>：</p>\n<p><a href=\"https://github.com/freewind/bytom/blob/master/node/node.go#L59\">node/node.go#L59</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">NewNode</span><span class=\"token punctuation\">(</span>config <span class=\"token operator\">*</span>cfg<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Node <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    syncManager<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> netsync<span class=\"token punctuation\">.</span><span class=\"token function\">NewSyncManager</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> chain<span class=\"token punctuation\">,</span> txPool<span class=\"token punctuation\">,</span> newBlockCh<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>在创建<code class=\"gatsby-code-text\">SyncManager</code>的时候，又创建了<code class=\"gatsby-code-text\">Switch</code>:</p>\n<p><a href=\"https://github.com/freewind/bytom/blob/master/netsync/handle.go#L42\">netsync/handle.go#L42</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">NewSyncManager</span><span class=\"token punctuation\">(</span>config <span class=\"token operator\">*</span>cfg<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">,</span> chain <span class=\"token operator\">*</span>core<span class=\"token punctuation\">.</span>Chain<span class=\"token punctuation\">,</span> txPool <span class=\"token operator\">*</span>core<span class=\"token punctuation\">.</span>TxPool<span class=\"token punctuation\">,</span> newBlockCh <span class=\"token keyword\">chan</span> <span class=\"token operator\">*</span>bc<span class=\"token punctuation\">.</span>Hash<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>SyncManager<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    manager<span class=\"token punctuation\">.</span>sw <span class=\"token operator\">=</span> p2p<span class=\"token punctuation\">.</span><span class=\"token function\">NewSwitch</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>P2P<span class=\"token punctuation\">,</span> trustHistoryDB<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// ...</span>\n    protocolReactor <span class=\"token operator\">:=</span> <span class=\"token function\">NewProtocolReactor</span><span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">,</span> txPool<span class=\"token punctuation\">,</span> manager<span class=\"token punctuation\">.</span>sw<span class=\"token punctuation\">,</span> manager<span class=\"token punctuation\">.</span>blockKeeper<span class=\"token punctuation\">,</span> manager<span class=\"token punctuation\">.</span>fetcher<span class=\"token punctuation\">,</span> manager<span class=\"token punctuation\">.</span>peers<span class=\"token punctuation\">,</span> manager<span class=\"token punctuation\">.</span>newPeerCh<span class=\"token punctuation\">,</span> manager<span class=\"token punctuation\">.</span>txSyncCh<span class=\"token punctuation\">,</span> manager<span class=\"token punctuation\">.</span>dropPeerCh<span class=\"token punctuation\">)</span>\n    manager<span class=\"token punctuation\">.</span>sw<span class=\"token punctuation\">.</span><span class=\"token function\">AddReactor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PROTOCOL\"</span><span class=\"token punctuation\">,</span> protocolReactor<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Create &amp; add listener</span>\n    p<span class=\"token punctuation\">,</span> address <span class=\"token operator\">:=</span> <span class=\"token function\">protocolAndAddress</span><span class=\"token punctuation\">(</span>manager<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>P2P<span class=\"token punctuation\">.</span>ListenAddress<span class=\"token punctuation\">)</span>\n    l <span class=\"token operator\">:=</span> p2p<span class=\"token punctuation\">.</span><span class=\"token function\">NewDefaultListener</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">,</span> manager<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>P2P<span class=\"token punctuation\">.</span>SkipUPNP<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n    manager<span class=\"token punctuation\">.</span>sw<span class=\"token punctuation\">.</span><span class=\"token function\">AddListener</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>这里需要注意一下，上面创建的<code class=\"gatsby-code-text\">protocolReactor</code>对象，是用来处理当有节点连接上端口后，双方如何交互的事情。跟这次问题“监听端口”没有直接关系，但是这里也可以注意一下。</p>\n<p>然后又创建了一个<code class=\"gatsby-code-text\">DefaultListener</code>对象，而监听端口的动作，就是在它里面发生的。Listener创建之后，将会添加到<code class=\"gatsby-code-text\">manager.sw</code>（即<code class=\"gatsby-code-text\">Switch</code>）中，用于在那边进行外界数据与事件的交互。</p>\n<h3 id=\"监听端口\"><a href=\"#%E7%9B%91%E5%90%AC%E7%AB%AF%E5%8F%A3\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>监听端口</h3>\n<p><code class=\"gatsby-code-text\">NewDefaultListener</code>中做的事情比较多，所以我们把它分成几块说：</p>\n<p><a href=\"https://github.com/freewind/bytom/blob/master/p2p/listener.go#L52\">p2p/listener.go#L52</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">NewDefaultListener</span><span class=\"token punctuation\">(</span>protocol <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> lAddr <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> skipUPNP <span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> logger tlog<span class=\"token punctuation\">.</span>Logger<span class=\"token punctuation\">)</span> Listener <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Local listen IP &amp; port</span>\n    lAddrIP<span class=\"token punctuation\">,</span> lAddrPort <span class=\"token operator\">:=</span> <span class=\"token function\">splitHostPort</span><span class=\"token punctuation\">(</span>lAddr<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Create listener</span>\n    <span class=\"token keyword\">var</span> listener net<span class=\"token punctuation\">.</span>Listener\n    <span class=\"token keyword\">var</span> err <span class=\"token builtin\">error</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tryListenSeconds<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        listener<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">Listen</span><span class=\"token punctuation\">(</span>protocol<span class=\"token punctuation\">,</span> lAddr<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">&lt;</span> tryListenSeconds<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n            time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        cmn<span class=\"token punctuation\">.</span><span class=\"token function\">PanicCrisis</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ...</span></code></pre>\n      </div>\n<p>上面这部分就是真正监听的代码了。通过Go语言提供的<code class=\"gatsby-code-text\">net.Listen</code>函数，监听了指定的地址。另外，在监听的时候，进行了多次尝试，因为当一个刚刚被使用的端口被放开后，还需要一小段时间才能真正释放，所以这里需要多尝试几次。</p>\n<p>其中<code class=\"gatsby-code-text\">tryListenSeconds</code>是一个常量，值为<code class=\"gatsby-code-text\">5</code>，也就是说，大约会尝试5秒钟，要是都绑定不上，才会真正失败，抛出错误。</p>\n<p>后面省略了一些代码，主要是用来获取当前监听的实际ip以及外网ip，并记录在日志中。本想在这里简单讲讲，但是发现还有点麻烦，所以打算放在后面专开一个问题。</p>\n<p>其实本次问题到这里就已经结束了，因为已经完成了“监听”。但是后面还有一些初始化操作，是为了让比原可以跟连接上该端口的节点进行交互，也值得在这里讲讲。</p>\n<p>接着刚才的方法，最后的部分是：</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\">    dl <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>DefaultListener<span class=\"token punctuation\">{</span>\n        listener<span class=\"token punctuation\">:</span>    listener<span class=\"token punctuation\">,</span>\n        intAddr<span class=\"token punctuation\">:</span>     intAddr<span class=\"token punctuation\">,</span>\n        extAddr<span class=\"token punctuation\">:</span>     extAddr<span class=\"token punctuation\">,</span>\n        connections<span class=\"token punctuation\">:</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> net<span class=\"token punctuation\">.</span>Conn<span class=\"token punctuation\">,</span> numBufferedConnections<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n    dl<span class=\"token punctuation\">.</span>BaseService <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>cmn<span class=\"token punctuation\">.</span><span class=\"token function\">NewBaseService</span><span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">,</span> <span class=\"token string\">\"DefaultListener\"</span><span class=\"token punctuation\">,</span> dl<span class=\"token punctuation\">)</span>\n    dl<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Started upon construction</span>\n    <span class=\"token keyword\">return</span> dl\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>需要注意的是<code class=\"gatsby-code-text\">connections</code>，它是一个带有缓冲的channel（<code class=\"gatsby-code-text\">numBufferedConnections</code>值为<code class=\"gatsby-code-text\">10</code>），用来存放连接上该端口的连接对象。这些操作将在后面的<code class=\"gatsby-code-text\">dl.Start()</code>中执行。</p>\n<p><code class=\"gatsby-code-text\">dl.Start()</code>将调用<code class=\"gatsby-code-text\">DefaultListener</code>对应的<code class=\"gatsby-code-text\">OnStart</code>方法，如下：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/listener.go#L114\">p2p/listener.go#L114</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">*</span>DefaultListener<span class=\"token punctuation\">)</span> <span class=\"token function\">OnStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    l<span class=\"token punctuation\">.</span>BaseService<span class=\"token punctuation\">.</span><span class=\"token function\">OnStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">listenRoutine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>其中的<code class=\"gatsby-code-text\">l.listenRoutine</code>，就是执行前面所说的向<code class=\"gatsby-code-text\">connections</code> channel里放入连接的函数:</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/listener.go#L126\">p2p/listener.go#L126</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">*</span>DefaultListener<span class=\"token punctuation\">)</span> <span class=\"token function\">listenRoutine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        conn<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> l<span class=\"token punctuation\">.</span>listener<span class=\"token punctuation\">.</span><span class=\"token function\">Accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// ...</span>\n        l<span class=\"token punctuation\">.</span>connections <span class=\"token operator\">&lt;-</span> conn\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Cleanup</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span>connections<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>而<code class=\"gatsby-code-text\">Switch</code>在<code class=\"gatsby-code-text\">SyncManager</code>启动的时候会被启动，在它的<code class=\"gatsby-code-text\">OnStart</code>方法中，会拿到所有Listener（即监听端口的对象）中<code class=\"gatsby-code-text\">connections</code>channel中的连接，与它们交互。</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/switch.go#L498\">https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/switch.go#L498</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>sw <span class=\"token operator\">*</span>Switch<span class=\"token punctuation\">)</span> <span class=\"token function\">listenerRoutine</span><span class=\"token punctuation\">(</span>l Listener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        inConn<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">Connections</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// ...</span>\n        \n        err <span class=\"token operator\">:=</span> sw<span class=\"token punctuation\">.</span><span class=\"token function\">addPeerWithConnectionAndConfig</span><span class=\"token punctuation\">(</span>inConn<span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">.</span>peerConfig<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>其中<code class=\"gatsby-code-text\">sw.addPeerWithConnectionAndConfig</code>就是与对应节点进行交互的逻辑所在，但是这已经超出了本次问题的范畴，下次再讲。</p>\n<p>到此为止，本次的问题，应该已经讲清楚了。</p>\n<hr>\n<p>如果你觉得这些文章对你非常有用，控制不住想打赏作者，可以有以下选择：</p>\n<ol>\n<li>BTM: <code class=\"gatsby-code-text\">0x6bcCfb7265d4aB0C1a71F7d19b9E581cae73D777</code></li>\n<li>BTC: <code class=\"gatsby-code-text\">1Af2Q23Y1kqgtgbryzjS7RxrnEmyvYuX4b</code></li>\n<li>ETH: <code class=\"gatsby-code-text\">0x6bcCfb7265d4aB0C1a71F7d19b9E581cae73D777</code></li>\n</ol>\n<p>多少请随意，心意最重要，我们一起努力吧！</p>","frontmatter":{"title":"监听p2p端口","next":null,"prev":null},"fields":{"path":null,"slug":"docs/bytomanalysis-listening-P2P-port.html"}}},"pathContext":{"slug":"docs/bytomanalysis-listening-P2P-port.html"}}