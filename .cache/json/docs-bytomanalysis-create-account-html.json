{"data":{"markdownRemark":{"html":"<p>在前面，我们探讨了从浏览器的dashboard中进行注册的时候，数据是如何从前端发到后端的，并且后端是如何创建密钥的。而本文将继续讨论，比原是如何通过<code class=\"gatsby-code-text\">/create-account</code>接口来创建帐户的。</p>\n<p>在前面我们知道在<code class=\"gatsby-code-text\">API.buildHandler</code>中配置了与创建帐户相关的接口配置：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/api/api.go#L164-L244\">api/api.go#L164-L244</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span>API<span class=\"token punctuation\">)</span> <span class=\"token function\">buildHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">if</span> a<span class=\"token punctuation\">.</span>wallet <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n        m<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/create-account\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">jsonHandler</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>createAccount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// ...</span></code></pre>\n      </div>\n<p>可以看到，<code class=\"gatsby-code-text\">/create-account</code>对应的handler是<code class=\"gatsby-code-text\">a.createAccount</code>，它是我们本文将研究的重点。外面套着的<code class=\"gatsby-code-text\">jsonHandler</code>是用来自动JSON与GO数据类型之间的转换的，之前讨论过，这里不再说。</p>\n<p>我们先看一下<code class=\"gatsby-code-text\">a.createAccount</code>的代码：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/api/accounts.go#L15-L30\">api/accounts.go#L15-L30</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token comment\">// POST /create-account</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span>API<span class=\"token punctuation\">)</span> <span class=\"token function\">createAccount</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> ins <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    RootXPubs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>chainkd<span class=\"token punctuation\">.</span>XPub <span class=\"token string\">`json:\"root_xpubs\"`</span>\n    Quorum    <span class=\"token builtin\">int</span>            <span class=\"token string\">`json:\"quorum\"`</span>\n    Alias     <span class=\"token builtin\">string</span>         <span class=\"token string\">`json:\"alias\"`</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> Response <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 1. </span>\n    acc<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> a<span class=\"token punctuation\">.</span>wallet<span class=\"token punctuation\">.</span>AccountMgr<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> ins<span class=\"token punctuation\">.</span>RootXPubs<span class=\"token punctuation\">,</span> ins<span class=\"token punctuation\">.</span>Quorum<span class=\"token punctuation\">,</span> ins<span class=\"token punctuation\">.</span>Alias<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">NewErrorResponse</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 2. </span>\n    annotatedAccount <span class=\"token operator\">:=</span> account<span class=\"token punctuation\">.</span><span class=\"token function\">Annotated</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">)</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">WithField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"account ID\"</span><span class=\"token punctuation\">,</span> annotatedAccount<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Created account\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 3.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">NewSuccessResponse</span><span class=\"token punctuation\">(</span>annotatedAccount<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>可以看到，它需要前端传过来<code class=\"gatsby-code-text\">root_xpubs</code>、<code class=\"gatsby-code-text\">quorum</code>和<code class=\"gatsby-code-text\">alias</code>这三个参数，我们在之前的文章中也看到，前端也的确传了过来。这三个参数，通过<code class=\"gatsby-code-text\">jsonHandler</code>的转换，到这个方法的时候，已经成了合适的GO类型，我们可以直接使用。</p>\n<p>这个方法主要分成了三块：</p>\n<ol>\n<li>使用<code class=\"gatsby-code-text\">a.wallet.AccountMgr.Create</code>以及用户发送的参数去创建相应的帐户</li>\n<li>调用<code class=\"gatsby-code-text\">account.Annotated(acc)</code>，把account对象转换成可以被JSON化的对象</li>\n<li>向前端发回成功信息。该信息会被jsonHandler自动转为JSON发到前端，用于显示提示信息</li>\n</ol>\n<p>第3步没什么好说的，我们主要把目光集中在前两步，下面将依次结合源代码详解。</p>\n<h2 id=\"创建相应的帐户\"><a href=\"#%E5%88%9B%E5%BB%BA%E7%9B%B8%E5%BA%94%E7%9A%84%E5%B8%90%E6%88%B7\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>创建相应的帐户</h2>\n<p>创建帐户使用的是<code class=\"gatsby-code-text\">a.wallet.AccountMgr.Create</code>方法，先看代码：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/account/accounts.go#L145-L174\">account/accounts.go#L145-L174</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token comment\">// Create creates a new Account.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>Manager<span class=\"token punctuation\">)</span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> xpubs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>chainkd<span class=\"token punctuation\">.</span>XPub<span class=\"token punctuation\">,</span> quorum <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> alias <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Account<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    m<span class=\"token punctuation\">.</span>accountMu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> m<span class=\"token punctuation\">.</span>accountMu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 1.</span>\n    normalizedAlias <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">TrimSpace</span><span class=\"token punctuation\">(</span>alias<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">// 2.</span>\n    <span class=\"token keyword\">if</span> existed <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token function\">aliasKey</span><span class=\"token punctuation\">(</span>normalizedAlias<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> existed <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> ErrDuplicateAlias\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 3. </span>\n    signer<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> signers<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"account\"</span><span class=\"token punctuation\">,</span> xpubs<span class=\"token punctuation\">,</span> quorum<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">getNextAccountIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    id <span class=\"token operator\">:=</span> signers<span class=\"token punctuation\">.</span><span class=\"token function\">IDGenerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">Wrap</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 4.</span>\n    account <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Account<span class=\"token punctuation\">{</span>Signer<span class=\"token punctuation\">:</span> signer<span class=\"token punctuation\">,</span> ID<span class=\"token punctuation\">:</span> id<span class=\"token punctuation\">,</span> Alias<span class=\"token punctuation\">:</span> normalizedAlias<span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 5. </span>\n    rawAccount<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> ErrMarshalAccount\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 6. </span>\n    storeBatch <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span><span class=\"token function\">NewBatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    accountID <span class=\"token operator\">:=</span> <span class=\"token function\">Key</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n    storeBatch<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>accountID<span class=\"token punctuation\">,</span> rawAccount<span class=\"token punctuation\">)</span>\n    storeBatch<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token function\">aliasKey</span><span class=\"token punctuation\">(</span>normalizedAlias<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    storeBatch<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> account<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>我们把该方法分成了6块，这里依次讲解：</p>\n<ol>\n<li>把传进来的帐户别名进行标准化修正，比如去掉两头空白并小写</li>\n<li>从数据库中寻找该别名是否已经用过。因为帐户和别名是一一对应的，帐户创建成功后，会在数据库中把别名记录下来。所以如果能从数据库中查找，说明已经被占用，会返回一个错误信息。这样前台就可以提醒用户更换。</li>\n<li>创建一个<code class=\"gatsby-code-text\">Signer</code>，实际上就是对<code class=\"gatsby-code-text\">xpubs</code>、<code class=\"gatsby-code-text\">quorum</code>等参数的正确性进行检查，没问题的话会把这些信息捆绑在一起，否则返回错误。这个<code class=\"gatsby-code-text\">Signer</code>我感觉是检查过没问题签个字的意思。</li>\n<li>把第3步创建的signer和id，还有前面的标准化之后的别名拿起来，放在一起，就组成了一个帐户</li>\n<li>把帐户对象变成JSON，方便后面往数据库里存</li>\n<li>把帐户相关的数据保存在数据库，其中别名与id对应（方便以后查询别名是否存在），id与account对象（JSON格式）对应，保存具体的信息</li>\n</ol>\n<p>这几步中的第3步中涉及到的方法比较多，需要再细致分析一下：</p>\n<h3 id=\"signerscreate\"><a href=\"#signerscreate\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>signers.Create</h3>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/blockchain/signers/signers.go#L67-L90\">blockchain/signers/signers.go#L67-L90</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token comment\">// Create creates and stores a Signer in the database</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>signerType <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> xpubs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>chainkd<span class=\"token punctuation\">.</span>XPub<span class=\"token punctuation\">,</span> quorum <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> keyIndex <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Signer<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 1. </span>\n    <span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>xpubs<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">Wrap</span><span class=\"token punctuation\">(</span>ErrNoXPubs<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 2.</span>\n    sort<span class=\"token punctuation\">.</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token function\">sortKeys</span><span class=\"token punctuation\">(</span>xpubs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// this transforms the input slice</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>xpubs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> bytes<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>xpubs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> xpubs<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">WithDetailf</span><span class=\"token punctuation\">(</span>ErrDupeXPub<span class=\"token punctuation\">,</span> <span class=\"token string\">\"duplicated key=%x\"</span><span class=\"token punctuation\">,</span> xpubs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 3. </span>\n    <span class=\"token keyword\">if</span> quorum <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> quorum <span class=\"token operator\">></span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>xpubs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">Wrap</span><span class=\"token punctuation\">(</span>ErrBadQuorum<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 4.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>Signer<span class=\"token punctuation\">{</span>\n        Type<span class=\"token punctuation\">:</span>     signerType<span class=\"token punctuation\">,</span>\n        XPubs<span class=\"token punctuation\">:</span>    xpubs<span class=\"token punctuation\">,</span>\n        Quorum<span class=\"token punctuation\">:</span>   quorum<span class=\"token punctuation\">,</span>\n        KeyIndex<span class=\"token punctuation\">:</span> keyIndex<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>这个方法可以分成4块，主要就是检查参数是否正确，还是比较清楚的：</p>\n<ol>\n<li>xpubs不能为空</li>\n<li>xpubs不能有重复的。检查的时候就先排序，再看相邻的两个是否相等。我觉得这一块代码应该抽出来，比如<code class=\"gatsby-code-text\">findDuplicated</code>这样的方法，直接放在这里太过于细节了。</li>\n<li>检查<code class=\"gatsby-code-text\">quorum</code>，它是意思是“所需的签名数量”，它必须小于等于xpubs的个数，但不能为0。这个参数到底有什么用这个可能已经触及到比较核心的东西，放在以后研究。</li>\n<li>把各信息打包在一起，称之为<code class=\"gatsby-code-text\">Singer</code></li>\n</ol>\n<p>另外，在第2处还是一个需要注意的<code class=\"gatsby-code-text\">sortKeys</code>。它实际上对应的是<code class=\"gatsby-code-text\">type sortKeys []chainkd.XPub</code>，为什么要这么做，而不是直接把<code class=\"gatsby-code-text\">xpubs</code>传给<code class=\"gatsby-code-text\">sort.Sort</code>呢？</p>\n<p>这是因为，<code class=\"gatsby-code-text\">sort.Sort</code>需要传进来的对象拥有以下接口：</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">type</span> Interface <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Len is the number of elements in the collection.</span>\n    <span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span>\n    <span class=\"token comment\">// Less reports whether the element with</span>\n    <span class=\"token comment\">// index i should sort before the element with index j.</span>\n    <span class=\"token function\">Less</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span>\n    <span class=\"token comment\">// Swap swaps the elements with indexes i and j.</span>\n    <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>但是<code class=\"gatsby-code-text\">xpubs</code>是没有的。所以我们把它的类型重新定义成<code class=\"gatsby-code-text\">sortKeys</code>后，就可以添加上这些方法了：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/blockchain/signers/signers.go#L94-L96\">blockchain/signers/signers.go#L94-L96</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s sortKeys<span class=\"token punctuation\">)</span> <span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span>           <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s sortKeys<span class=\"token punctuation\">)</span> <span class=\"token function\">Less</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> bytes<span class=\"token punctuation\">.</span><span class=\"token function\">Compare</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s sortKeys<span class=\"token punctuation\">)</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>      <span class=\"token punctuation\">{</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<h3 id=\"mgetnextaccountindex\"><a href=\"#mgetnextaccountindex\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>m.getNextAccountIndex()</h3>\n<p>然后是<code class=\"gatsby-code-text\">signers.Create(&quot;account&quot;, xpubs, quorum, m.getNextAccountIndex())</code>中的<code class=\"gatsby-code-text\">m.getNextAccountIndex()</code>，它的代码如下：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/account/accounts.go#L119-L130\">account/accounts.go#L119-L130</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>Manager<span class=\"token punctuation\">)</span> <span class=\"token function\">getNextAccountIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">uint64</span> <span class=\"token punctuation\">{</span>\n    m<span class=\"token punctuation\">.</span>accIndexMu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> m<span class=\"token punctuation\">.</span>accIndexMu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> nextIndex <span class=\"token builtin\">uint64</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">if</span> rawIndexBytes <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>accountIndexKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> rawIndexBytes <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        nextIndex <span class=\"token operator\">=</span> common<span class=\"token punctuation\">.</span><span class=\"token function\">BytesToUnit64</span><span class=\"token punctuation\">(</span>rawIndexBytes<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n\n    m<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>accountIndexKey<span class=\"token punctuation\">,</span> common<span class=\"token punctuation\">.</span><span class=\"token function\">Unit64ToBytes</span><span class=\"token punctuation\">(</span>nextIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> nextIndex\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>从这个方法可以看出，它用于产生自增的数字。这个数字保存在数据库中，其key为<code class=\"gatsby-code-text\">accountIndexKey</code>（常量，值为<code class=\"gatsby-code-text\">[]byte(&quot;AccountIndex&quot;)</code>），value的值第一次为<code class=\"gatsby-code-text\">1</code>，之后每次调用都会把它加1，返回的同时把它也保存在数据库里。这样比原程序就算重启该数字也不会丢失。</p>\n<h3 id=\"signersidgenerate\"><a href=\"#signersidgenerate\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>signers.IDGenerate()</h3>\n<p>上代码：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/blockchain/signers/idgenerate.go#L21-L41\">blockchain/signers/idgenerate.go#L21-L41</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token comment\">//IDGenerate generate signer unique id</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">IDGenerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> ourEpochMS <span class=\"token builtin\">uint64</span> <span class=\"token operator\">=</span> <span class=\"token number\">1496635208000</span>\n    <span class=\"token keyword\">var</span> n <span class=\"token builtin\">uint64</span>\n\n    nowMS <span class=\"token operator\">:=</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">UnixNano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1e6</span><span class=\"token punctuation\">)</span>\n    seqIndex <span class=\"token operator\">:=</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token function\">nextSeqID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    seqID <span class=\"token operator\">:=</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span>seqIndex <span class=\"token operator\">%</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n    shardID <span class=\"token operator\">:=</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n    n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>nowMS <span class=\"token operator\">-</span> ourEpochMS<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">23</span>\n    n <span class=\"token operator\">=</span> n <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>shardID <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    n <span class=\"token operator\">=</span> n <span class=\"token operator\">|</span> seqID\n\n    bin <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n    binary<span class=\"token punctuation\">.</span>BigEndian<span class=\"token punctuation\">.</span><span class=\"token function\">PutUint64</span><span class=\"token punctuation\">(</span>bin<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n    encodeString <span class=\"token operator\">:=</span> base32<span class=\"token punctuation\">.</span>HexEncoding<span class=\"token punctuation\">.</span><span class=\"token function\">WithPadding</span><span class=\"token punctuation\">(</span>base32<span class=\"token punctuation\">.</span>NoPadding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">EncodeToString</span><span class=\"token punctuation\">(</span>bin<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> encodeString\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>从代码中可以看到，这个算法还是相当复杂的，从注释上来看，它是要生成一个“不重复”的id。如果我们细看代码中的算法，发现它没并有和我们的密钥或者帐户有关系，所以我不太明白，如果仅仅是需要一个不重复的id，为什么不能直接使用如uuid这样的算法。另外这个算法是否有名字呢？已经提了issue向开发人员询问：<a href=\"https://github.com/Bytom/bytom/issues/926\">https://github.com/Bytom/bytom/issues/926</a></p>\n<p>现在可以回到我们的主线<code class=\"gatsby-code-text\">a.wallet.AccountMgr.Create</code>上了。关于创建帐户的流程，上面已经基本讲了，但是还有一些地方我们还没有分析：</p>\n<ol>\n<li>上面多次提到使用了数据库，那么使用的是什么数据库？在哪里进行了初始化？</li>\n<li>这个<code class=\"gatsby-code-text\">a.wallet.AccountMgr.Create</code>方法中对应的<code class=\"gatsby-code-text\">AccountMgr</code>对象是在哪里构造出来的？</li>\n</ol>\n<h3 id=\"数据库与accountmgr的初始化\"><a href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8Eaccountmgr%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>数据库与<code class=\"gatsby-code-text\">AccountMgr</code>的初始化</h3>\n<p>比原在内部使用了<a href=\"https://github.com/google/leveldb\">leveldb</a>这个数据库，从配置文件<code class=\"gatsby-code-text\">config.toml</code>中就可以看出来：</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-ini\"><code class=\"gatsby-code-ini\">$ cat config.toml\n<span class=\"token constant\">fast_sync</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> true</span>\n<span class=\"token constant\">db_backend</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> \"leveldb\"</span></code></pre>\n      </div>\n<p>这是一个由Google开发的性能非常高的Key-Value型的NoSql数据库，比特币也用的是它。</p>\n<p>比原在代码中使用它保存各种数据，比如区块、帐户等。</p>\n<p>我们看一下，它是在哪里进行了初始化。</p>\n<p>可以看到，在创建比原节点对象的时候，有大量的与数据库以及帐户相关的初始化操作：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/node/node.go#L59-L142\">node/node.go#L59-L142</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">NewNode</span><span class=\"token punctuation\">(</span>config <span class=\"token operator\">*</span>cfg<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Node <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    \n    <span class=\"token comment\">// Get store</span>\n    coreDB <span class=\"token operator\">:=</span> dbm<span class=\"token punctuation\">.</span><span class=\"token function\">NewDB</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"core\"</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>DBBackend<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">DBDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    store <span class=\"token operator\">:=</span> leveldb<span class=\"token punctuation\">.</span><span class=\"token function\">NewStore</span><span class=\"token punctuation\">(</span>coreDB<span class=\"token punctuation\">)</span>\n\n    tokenDB <span class=\"token operator\">:=</span> dbm<span class=\"token punctuation\">.</span><span class=\"token function\">NewDB</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accesstoken\"</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>DBBackend<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">DBDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    accessTokens <span class=\"token operator\">:=</span> accesstoken<span class=\"token punctuation\">.</span><span class=\"token function\">NewStore</span><span class=\"token punctuation\">(</span>tokenDB<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// ...</span>\n\n    txFeedDB <span class=\"token operator\">:=</span> dbm<span class=\"token punctuation\">.</span><span class=\"token function\">NewDB</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"txfeeds\"</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>DBBackend<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">DBDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    txFeed <span class=\"token operator\">=</span> txfeed<span class=\"token punctuation\">.</span><span class=\"token function\">NewTracker</span><span class=\"token punctuation\">(</span>txFeedDB<span class=\"token punctuation\">,</span> chain<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>config<span class=\"token punctuation\">.</span>Wallet<span class=\"token punctuation\">.</span>Disable <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 1. </span>\n        walletDB <span class=\"token operator\">:=</span> dbm<span class=\"token punctuation\">.</span><span class=\"token function\">NewDB</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wallet\"</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>DBBackend<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">DBDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 2.</span>\n        accounts <span class=\"token operator\">=</span> account<span class=\"token punctuation\">.</span><span class=\"token function\">NewManager</span><span class=\"token punctuation\">(</span>walletDB<span class=\"token punctuation\">,</span> chain<span class=\"token punctuation\">)</span>\n        assets <span class=\"token operator\">=</span> asset<span class=\"token punctuation\">.</span><span class=\"token function\">NewRegistry</span><span class=\"token punctuation\">(</span>walletDB<span class=\"token punctuation\">,</span> chain<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 3. </span>\n        wallet<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> w<span class=\"token punctuation\">.</span><span class=\"token function\">NewWallet</span><span class=\"token punctuation\">(</span>walletDB<span class=\"token punctuation\">,</span> accounts<span class=\"token punctuation\">,</span> assets<span class=\"token punctuation\">,</span> hsm<span class=\"token punctuation\">,</span> chain<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>那么我们在本文中用到的，就是这里的<code class=\"gatsby-code-text\">walletDB</code>，在上面代码中的数字1对应的地方。</p>\n<p>另外，<code class=\"gatsby-code-text\">AccountMgr</code>的初始化在也这个方法中进行了。可以看到，在第2处，生成的<code class=\"gatsby-code-text\">accounts</code>对象，就是我们前面提到的<code class=\"gatsby-code-text\">a.wallet.AccountMgr</code>中的<code class=\"gatsby-code-text\">AccountMgr</code>。这可以从第3处看到，<code class=\"gatsby-code-text\">accounts</code>以参数形式传给了<code class=\"gatsby-code-text\">NewWallet</code>生成了<code class=\"gatsby-code-text\">wallet</code>对象，它对应的字段就是<code class=\"gatsby-code-text\">AccountMgr</code>。</p>\n<p>然后，当Node对象启动时，它会启动web api服务：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/node/node.go#L169-L180\">node/node.go#L169-L180</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span>Node<span class=\"token punctuation\">)</span> <span class=\"token function\">OnStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    n<span class=\"token punctuation\">.</span><span class=\"token function\">initAndstartApiServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>在<code class=\"gatsby-code-text\">initAndstartApiServer</code>方法里，又会创建<code class=\"gatsby-code-text\">API</code>对应的对象：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/node/node.go#L161-L167\">node/node.go#L161-L167</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span>Node<span class=\"token punctuation\">)</span> <span class=\"token function\">initAndstartApiServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    n<span class=\"token punctuation\">.</span>api <span class=\"token operator\">=</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">NewAPI</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>syncManager<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">.</span>wallet<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">.</span>txfeed<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">.</span>cpuMiner<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">.</span>miningPool<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">.</span>accessTokens<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>可以看到，它把<code class=\"gatsby-code-text\">n.wallet</code>对象传给了<code class=\"gatsby-code-text\">NewAPI</code>，所以<code class=\"gatsby-code-text\">/create-account</code>对应的handler<code class=\"gatsby-code-text\">a.createAccount</code>中才可以使用<code class=\"gatsby-code-text\">a.wallet.AccountMgr.Create</code>，因为这里的<code class=\"gatsby-code-text\">a</code>指的就是<code class=\"gatsby-code-text\">api</code>。</p>\n<p>这样的话，与创建帐户的流程及相关的对象的初始化我们就都清楚了。</p>\n<h2 id=\"annotatedacc\"><a href=\"#annotatedacc\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Annotated(acc)</h2>\n<p>下面就回到我们的<code class=\"gatsby-code-text\">API.createAccount</code>中的第2块代码：</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\">    <span class=\"token comment\">// 2. </span>\n    annotatedAccount <span class=\"token operator\">:=</span> account<span class=\"token punctuation\">.</span><span class=\"token function\">Annotated</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">)</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">WithField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"account ID\"</span><span class=\"token punctuation\">,</span> annotatedAccount<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Created account\"</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>我们来看一下<code class=\"gatsby-code-text\">account.Annotated(acc)</code>：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/account/indexer.go#L27-L36\">account/indexer.go#L27-L36</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token comment\">//Annotated init an annotated account object</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Annotated</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span>Account<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>query<span class=\"token punctuation\">.</span>AnnotatedAccount <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>query<span class=\"token punctuation\">.</span>AnnotatedAccount<span class=\"token punctuation\">{</span>\n        ID<span class=\"token punctuation\">:</span>       a<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span>\n        Alias<span class=\"token punctuation\">:</span>    a<span class=\"token punctuation\">.</span>Alias<span class=\"token punctuation\">,</span>\n        Quorum<span class=\"token punctuation\">:</span>   a<span class=\"token punctuation\">.</span>Quorum<span class=\"token punctuation\">,</span>\n        XPubs<span class=\"token punctuation\">:</span>    a<span class=\"token punctuation\">.</span>XPubs<span class=\"token punctuation\">,</span>\n        KeyIndex<span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">.</span>KeyIndex<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>这里出现的<code class=\"gatsby-code-text\">query</code>指的是比原项目中的一个包<code class=\"gatsby-code-text\">blockchain/query</code>，相应的<code class=\"gatsby-code-text\">AnnotatedAccount</code>的定义如下：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/blockchain/query/annotated.go#L57-L63\">blockchain/query/annotated.go#L57-L63</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">type</span> AnnotatedAccount <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    ID       <span class=\"token builtin\">string</span>           <span class=\"token string\">`json:\"id\"`</span>\n    Alias    <span class=\"token builtin\">string</span>           <span class=\"token string\">`json:\"alias,omitempty\"`</span>\n    XPubs    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>chainkd<span class=\"token punctuation\">.</span>XPub   <span class=\"token string\">`json:\"xpubs\"`</span>\n    Quorum   <span class=\"token builtin\">int</span>              <span class=\"token string\">`json:\"quorum\"`</span>\n    KeyIndex <span class=\"token builtin\">uint64</span>           <span class=\"token string\">`json:\"key_index\"`</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>可以看到，它的字段与之前我们在创建帐户过程中出现的字段都差不多，不同的是后面多了一些与json相关的注解。在后在前面的<code class=\"gatsby-code-text\">account.Annotated</code>方法中，也是简单的把<code class=\"gatsby-code-text\">Account</code>对象里的数字赋值给它。</p>\n<p>为什么需要一个<code class=\"gatsby-code-text\">AnnotatedAccount</code>呢？原因很简单，因为我们需要把这些数据传给前端。在<code class=\"gatsby-code-text\">API.createAccount</code>的最后，第3步，会向前端返回<code class=\"gatsby-code-text\">NewSuccessResponse(annotatedAccount)</code>，由于这个值将会被<code class=\"gatsby-code-text\">jsonHandler</code>转换成JSON，所以它需要有一些跟json相关的注解才行。</p>\n<p>同时，我们也可以根据<code class=\"gatsby-code-text\">AnnotatedAccount</code>的字段来了解，我们最后将会向前端返回什么样的数据。</p>\n<p>到这里，我们已经差不多清楚了比原的<code class=\"gatsby-code-text\">/create-account</code>是如何根据用户提交的参数来创建帐户的。</p>\n<p>注：在阅读代码的过程中，对部分代码进行了重构，主要是从一些大方法分解出来了一些更具有描述性的小方法，以及一些变量名称的修改，增加可读性。<a href=\"https://github.com/Bytom/bytom/pull/924\">#924</a></p>\n<hr>\n<p>如果你觉得这些文章对你非常有用，控制不住想打赏作者，可以有以下选择：</p>\n<ol>\n<li>BTM: <code class=\"gatsby-code-text\">0x6bcCfb7265d4aB0C1a71F7d19b9E581cae73D777</code></li>\n<li>BTC: <code class=\"gatsby-code-text\">1Af2Q23Y1kqgtgbryzjS7RxrnEmyvYuX4b</code></li>\n<li>ETH: <code class=\"gatsby-code-text\">0x6bcCfb7265d4aB0C1a71F7d19b9E581cae73D777</code></li>\n</ol>\n<p>多少请随意，心意最重要，我们一起努力吧！</p>","frontmatter":{"title":"通过接口`/create-account`创建帐户","next":null,"prev":null},"fields":{"path":null,"slug":"docs/bytomanalysis-create-account.html"}}},"pathContext":{"slug":"docs/bytomanalysis-create-account.html"}}