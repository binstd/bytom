{"data":{"markdownRemark":{"html":"<p>人们常说，“阅读源代码”是学习编程的一种重要方法。作为程序员，我们在平时的学习工作中，都应该阅读过不少源代码。但是对于大多数人来说，阅读的可能更多是一些代码片断、示例，或者在老师、同事的指导下，先对要阅读的项目代码有了整体的了解之后，再进行针对性的阅读。</p>\n<p>但是如果我们面对的是一个像比原这样比较庞大的项目，身边又没有人指导，只能靠自己去看，这时应该怎么来阅读呢？也许每个人也都能找到自己的办法，或高效，或低效，或放弃。</p>\n<p>我在这次阅读比原源代码的过程中，尝试的是这样一种方法：从外部入手，通过与比原节点进行数据交互，来一步步了解比原的内部原理。就像剥石榴一样，一点点小心翼翼的下手，最后才能吃到鲜美的果肉。</p>\n<p>所以这个文章系列叫作“剥开比原看代码”。</p>\n<h2 id=\"说明\"><a href=\"#%E8%AF%B4%E6%98%8E\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>说明</h2>\n<p>在系列中的每一章，我通常都会由一个或者几个相关的问题入手，然后通过对源代码进行分析，来说明比原的代码是如何实现的。对于与当前问题关系不大的代码，则会简单带过，等真正需要它们出场的时候再详细解说。</p>\n<p>为了保证文章中引用代码的稳定性，我将基于比原的v1.0.1代码进行分析。随着时间推移，比原的代码也将快速更新，但是我觉得，只要把这个版本的代码理解了，再去看新的代码，应该是一件很容易的事情。</p>\n<p>在文章中，将会有一些直接指向github上bytom源代码的链接。为了方便，我专门将bytom v1.0.1的代码放到了一个新的仓库中，这样就不容易与比原官方的最新代码混淆。该仓库地址为：<a href=\"https://github.com/freewind/bytom-v1.0.1\">https://github.com/freewind/bytom-v1.0.1</a></p>\n<p>当然，你不必clone这个仓库（clone官方仓库<a href=\"http://github.com/Bytom/bytom\">http://github.com/Bytom/bytom</a>就够了），然后在必要的时候，使用以下命令将代码切换到<code class=\"gatsby-code-text\">v1.0.1</code>的tag，以便与本系列引用的代码一致：</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">git fetch\ngit checkout -b v1.0.1</code></pre>\n      </div>\n<p>不论采用哪种阅读方法，我想第一步都应该先在本地把比原节点跑起来，试试各种功能。</p>\n<p>对于如何下载、配置和安装的问题，请直接参看官方文档<a href=\"https://github.com/Bytom/bytom/tree/v1.0.1\">https://github.com/Bytom/bytom/tree/v1.0.1</a>（注意我这里给出的是v1.0.1的文档），这里不多说。</p>\n<h2 id=\"本篇问题\"><a href=\"#%E6%9C%AC%E7%AF%87%E9%97%AE%E9%A2%98\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>本篇问题</h2>\n<p>当我们本地使用<code class=\"gatsby-code-text\">make bytomd</code>编译完比原后，我们可以使用下面的命令来进行初始化：</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">./bytomd init --chain_id testnet</code></pre>\n      </div>\n<p>这里指定了使用的chain是<code class=\"gatsby-code-text\">testnet</code>（还有别的选项，如<code class=\"gatsby-code-text\">mainnet</code>等等）。运行成功后，它将会在本地文件系统生成一些配置文件，供比原启动时使用。</p>\n<p>所以我的问题是：</p>\n<h2 id=\"比原初始化时，产生了什么样的配置文件，放在了哪个目录下？\"><a href=\"#%E6%AF%94%E5%8E%9F%E5%88%9D%E5%A7%8B%E5%8C%96%E6%97%B6%EF%BC%8C%E4%BA%A7%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%EF%BC%8C%E6%94%BE%E5%9C%A8%E4%BA%86%E5%93%AA%E4%B8%AA%E7%9B%AE%E5%BD%95%E4%B8%8B%EF%BC%9F\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>比原初始化时，产生了什么样的配置文件，放在了哪个目录下？</h2>\n<p>下面我将结合源代码，来回答这个问题。</p>\n<h3 id=\"目录位置\"><a href=\"#%E7%9B%AE%E5%BD%95%E4%BD%8D%E7%BD%AE\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>目录位置</h3>\n<p>首先比原在本地会有一个目录专门用于放置各种数据，比如密钥、配置文件、数据库文件等。这个目录对应的代码位于<a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/config/config.go#L190-L205\">config/config.go#L190-L205</a>：</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">DefaultDataDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Try to place the data folder in the user's home dir</span>\n    home <span class=\"token operator\">:=</span> <span class=\"token function\">homeDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    dataDir <span class=\"token operator\">:=</span> <span class=\"token string\">\"./.bytom\"</span>\n    <span class=\"token keyword\">if</span> home <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">switch</span> runtime<span class=\"token punctuation\">.</span>GOOS <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"darwin\"</span><span class=\"token punctuation\">:</span>\n            dataDir <span class=\"token operator\">=</span> filepath<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>home<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Library\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bytom\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"windows\"</span><span class=\"token punctuation\">:</span>\n            dataDir <span class=\"token operator\">=</span> filepath<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>home<span class=\"token punctuation\">,</span> <span class=\"token string\">\"AppData\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Roaming\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bytom\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            dataDir <span class=\"token operator\">=</span> filepath<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>home<span class=\"token punctuation\">,</span> <span class=\"token string\">\".bytom\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> dataDir\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>可以看到，在不同的操作系统上，数据目录的位置也不同：</p>\n<ol>\n<li>苹果系统(<code class=\"gatsby-code-text\">darwin</code>)：<code class=\"gatsby-code-text\">~/Library/Bytom</code></li>\n<li>Windows(<code class=\"gatsby-code-text\">windows</code>): <code class=\"gatsby-code-text\">~/AppData/Roaming/Bytom</code></li>\n<li>其它（如Linux）：<code class=\"gatsby-code-text\">~/.bytom</code></li>\n</ol>\n<h3 id=\"配置文件内容\"><a href=\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>配置文件内容</h3>\n<p>我们根据自己的操作系统打开相应的目录（我的是<code class=\"gatsby-code-text\">~/Library/Bytom</code>），可以看到有一个<code class=\"gatsby-code-text\">config.toml</code>，内容大约如下：</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-ini\"><code class=\"gatsby-code-ini\">$ cat config.toml\n# This is a TOML config file.\n# For more information, see https://github.com/toml-lang/toml\n<span class=\"token constant\">fast_sync</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> true</span>\n<span class=\"token constant\">db_backend</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> \"leveldb\"</span>\n<span class=\"token constant\">api_addr</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> \"0.0.0.0:9888\"</span>\n<span class=\"token constant\">chain_id</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> \"testnet\"</span>\n<span class=\"token selector\">[p2p]</span>\n<span class=\"token constant\">laddr</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> \"tcp://0.0.0.0:46656\"</span>\n<span class=\"token constant\">seeds</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> \"47.96.42.1:46656,172.104.224.219:46656,45.118.132.164:46656\"</span></code></pre>\n      </div>\n<p>它已经把一些基本信息告诉我们了，比如：</p>\n<ul>\n<li><code class=\"gatsby-code-text\">db_backend = &quot;leveldb&quot;</code>：说明比原内部使用了leveldb作为数据库（用来保存块数据、帐号、交易信息等）</li>\n<li><code class=\"gatsby-code-text\">api_addr = &quot;0.0.0.0:9888&quot;</code>：我们可以在浏览器中打开<code class=\"gatsby-code-text\">http://localhost:9888</code>来访问dashboard页面，进行查看与管理</li>\n<li><code class=\"gatsby-code-text\">chain_id = &quot;testnet&quot;</code>：当前连接的是<code class=\"gatsby-code-text\">testnet</code>，即测试网，里面挖出来的比原币是不值钱的</li>\n<li><code class=\"gatsby-code-text\">laddr = &quot;tcp://0.0.0.0:46656&quot;</code>：本地监听<code class=\"gatsby-code-text\">46656</code>端口，别的节点如果想连我，就需要访问我的<code class=\"gatsby-code-text\">46656</code>端口</li>\n<li><code class=\"gatsby-code-text\">seeds = &quot;47.96.42.1:46656,172.104.224.219:46656,45.118.132.164:46656&quot;</code>：比原启动后，会主动连接这几个地址获取数据</li>\n</ul>\n<h3 id=\"内容模板\"><a href=\"#%E5%86%85%E5%AE%B9%E6%A8%A1%E6%9D%BF\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>内容模板</h3>\n<p>使用不同的<code class=\"gatsby-code-text\">chain_id</code>去初始化时，会生成不同内容的配置文件，那么这些内容来自于哪里呢？</p>\n<p>原来在<a href=\"https://github.com/freewind/bytom/blob/master/config/toml.go#L22-L45\">config/toml.go#L22-L45</a>，预定义了不同的模板内容：</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">var</span> defaultConfigTmpl <span class=\"token operator\">=</span> <span class=\"token string\">`# This is a TOML config file.\n# For more information, see https://github.com/toml-lang/toml\nfast_sync = true\ndb_backend = \"leveldb\"\napi_addr = \"0.0.0.0:9888\"\n`</span>\n\n<span class=\"token keyword\">var</span> mainNetConfigTmpl <span class=\"token operator\">=</span> <span class=\"token string\">`chain_id = \"mainnet\"\n[p2p]\nladdr = \"tcp://0.0.0.0:46657\"\nseeds = \"45.79.213.28:46657,198.74.61.131:46657,212.111.41.245:46657,\n47.100.214.154:46657,47.100.109.199:46657,47.100.105.165:46657\"\n`</span>\n\n<span class=\"token keyword\">var</span> testNetConfigTmpl <span class=\"token operator\">=</span> <span class=\"token string\">`chain_id = \"testnet\"\n[p2p]\nladdr = \"tcp://0.0.0.0:46656\"\nseeds = \"47.96.42.1:46656,172.104.224.219:46656,45.118.132.164:46656\"\n`</span>\n\n<span class=\"token keyword\">var</span> soloNetConfigTmpl <span class=\"token operator\">=</span> <span class=\"token string\">`chain_id = \"solonet\"\n[p2p]\nladdr = \"tcp://0.0.0.0:46658\"\nseeds = \"\"\n`</span></code></pre>\n      </div>\n<p>可以看到，原来这些端口号和seed的地址，都是事先写好在模板里的。</p>\n<p>而且，通过观察这些配置，我们可以发现，如果<code class=\"gatsby-code-text\">chain_id</code>不同，则监听的端口和连接的种子都不同：</p>\n<ol>\n<li>mainnet（连接到主网）: <code class=\"gatsby-code-text\">46657</code>，会主动连接6个种子</li>\n<li>testnet（连接到测试网）: <code class=\"gatsby-code-text\">46656</code>，会主动连接3个种子</li>\n<li>solonet（本地单独节点）: <code class=\"gatsby-code-text\">46658</code>，不会主动连接别人（也因此不会被别人连接上），适合单机研究</li>\n</ol>\n<h3 id=\"写入文件\"><a href=\"#%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>写入文件</h3>\n<p>这里我们需要快速的把<code class=\"gatsby-code-text\">bytomd init</code>的执行流程过一遍，才能清楚配置文件的写入时机，也同时把前面的内容串在了一起。</p>\n<p>首先，当我们运行<code class=\"gatsby-code-text\">bytomd init</code>时，它对应的代码入口为<a href=\"https://github.com/freewind/bytom/blob/master/cmd/bytomd/main.go#L54\">cmd/bytomd/main.go#L54</a>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cmd <span class=\"token operator\">:=</span> cli<span class=\"token punctuation\">.</span><span class=\"token function\">PrepareBaseCmd</span><span class=\"token punctuation\">(</span>commands<span class=\"token punctuation\">.</span>RootCmd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"TM\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">ExpandEnv</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">DefaultDataDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>其中的<code class=\"gatsby-code-text\">config.DefaultDataDir()</code>就对应于前面提到数据目录位置。</p>\n<p>然后执行<code class=\"gatsby-code-text\">cmd.Execute()</code>，将根据传入的参数<code class=\"gatsby-code-text\">init</code>，选择下面的函数来执行：<a href=\"https://github.com/freewind/bytom/blob/master/cmd/bytomd/commands/init.go#L25-L24\">cmd/bytomd/commands/init.go#L25-L24</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">initFiles</span><span class=\"token punctuation\">(</span>cmd <span class=\"token operator\">*</span>cobra<span class=\"token punctuation\">.</span>Command<span class=\"token punctuation\">,</span> args <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    configFilePath <span class=\"token operator\">:=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>RootDir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"config.toml\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Stat</span><span class=\"token punctuation\">(</span>configFilePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">!</span>os<span class=\"token punctuation\">.</span><span class=\"token function\">IsNotExist</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">WithField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config\"</span><span class=\"token punctuation\">,</span> configFilePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Already exists config file.\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> config<span class=\"token punctuation\">.</span>ChainID <span class=\"token operator\">==</span> <span class=\"token string\">\"mainnet\"</span> <span class=\"token punctuation\">{</span>\n        cfg<span class=\"token punctuation\">.</span><span class=\"token function\">EnsureRoot</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>RootDir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"mainnet\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> config<span class=\"token punctuation\">.</span>ChainID <span class=\"token operator\">==</span> <span class=\"token string\">\"testnet\"</span> <span class=\"token punctuation\">{</span>\n        cfg<span class=\"token punctuation\">.</span><span class=\"token function\">EnsureRoot</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>RootDir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"testnet\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        cfg<span class=\"token punctuation\">.</span><span class=\"token function\">EnsureRoot</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>RootDir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"solonet\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">WithField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config\"</span><span class=\"token punctuation\">,</span> configFilePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Initialized bytom\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>其中的<code class=\"gatsby-code-text\">configFilePath</code>，就是<code class=\"gatsby-code-text\">config.toml</code>的写入地址，即我们前面所说的数据目录下的<code class=\"gatsby-code-text\">config.toml</code>文件。</p>\n<p><code class=\"gatsby-code-text\">cfg.EnsureRoot</code>将用来确认数据目录是有效的，并且将根据传入的<code class=\"gatsby-code-text\">chain_id</code>不同，来生成不同的内容写入到配置文件中。</p>\n<p>它对应的代码是<a href=\"https://github.com/freewind/bytom/blob/master/config/toml.go#L10\">config/toml.go#L10</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">EnsureRoot</span><span class=\"token punctuation\">(</span>rootDir <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> network <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cmn<span class=\"token punctuation\">.</span><span class=\"token function\">EnsureDir</span><span class=\"token punctuation\">(</span>rootDir<span class=\"token punctuation\">,</span> <span class=\"token number\">0700</span><span class=\"token punctuation\">)</span>\n    cmn<span class=\"token punctuation\">.</span><span class=\"token function\">EnsureDir</span><span class=\"token punctuation\">(</span>rootDir<span class=\"token operator\">+</span><span class=\"token string\">\"/data\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0700</span><span class=\"token punctuation\">)</span>\n\n    configFilePath <span class=\"token operator\">:=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>rootDir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"config.toml\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Write default config file if missing.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>cmn<span class=\"token punctuation\">.</span><span class=\"token function\">FileExists</span><span class=\"token punctuation\">(</span>configFilePath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cmn<span class=\"token punctuation\">.</span><span class=\"token function\">MustWriteFile</span><span class=\"token punctuation\">(</span>configFilePath<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token function\">selectNetwork</span><span class=\"token punctuation\">(</span>network<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0644</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>可以看到，它对数据目录进行了权限上的确认，并且发现当配置文件存在的时候，不会做任何更改。所以如果我们需要生成新的配置文件，就需要把旧的删除（或改名）。</p>\n<p>其中的<code class=\"gatsby-code-text\">selectNetwork(network)</code>函数，实现了根据<code class=\"gatsby-code-text\">chain_id</code>的不同来组装不同的配置文件内容，它对应于<a href=\"https://github.com/freewind/bytom/blob/master/config/toml.go#L48\">master/config/toml.go#L48</a>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">selectNetwork</span><span class=\"token punctuation\">(</span>network <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> network <span class=\"token operator\">==</span> <span class=\"token string\">\"testnet\"</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> defaultConfigTmpl <span class=\"token operator\">+</span> testNetConfigTmpl\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> network <span class=\"token operator\">==</span> <span class=\"token string\">\"mainnet\"</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> defaultConfigTmpl <span class=\"token operator\">+</span> mainNetConfigTmpl\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> defaultConfigTmpl <span class=\"token operator\">+</span> soloNetConfigTmpl\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>果然就是一个简单的字符串拼接，其中的<code class=\"gatsby-code-text\">defaultConfigTmpl</code>和<code class=\"gatsby-code-text\">*NetConfgTmpl</code>在前面已经出现，这里不重复。</p>\n<p>最后调用第三方函数<code class=\"gatsby-code-text\">cmn.MustWriteFile(configFilePath, []byte(selectNetwork(network)), 0644)</code>，把拼接出来的配置文件内容以权限<code class=\"gatsby-code-text\">0644</code>写入到指定的文件地址。</p>\n<p>到这里，我们这个问题就算回答完毕了。</p>\n<hr>\n<p>如果你觉得这些文章对你非常有用，控制不住想打赏作者，可以有以下选择：</p>\n<ol>\n<li>BTM: <code class=\"gatsby-code-text\">0x6bcCfb7265d4aB0C1a71F7d19b9E581cae73D777</code></li>\n<li>BTC: <code class=\"gatsby-code-text\">1Af2Q23Y1kqgtgbryzjS7RxrnEmyvYuX4b</code></li>\n<li>ETH: <code class=\"gatsby-code-text\">0x6bcCfb7265d4aB0C1a71F7d19b9E581cae73D777</code></li>\n</ol>\n<p>多少请随意，心意最重要，我们一起努力吧！</p>","frontmatter":{"title":"初始化生成配置文件","next":null,"prev":null},"fields":{"path":null,"slug":"docs/bytomanalysis-initialization-configuration-file.html"}}},"pathContext":{"slug":"docs/bytomanalysis-initialization-configuration-file.html"}}