{"data":{"markdownRemark":{"html":"<p>在前一篇中，我们说到，当比原向其它节点请求区块数据时，<code class=\"gatsby-code-text\">BlockKeeper</code>会发送一个<code class=\"gatsby-code-text\">BlockRequestMessage</code>把需要的区块<code class=\"gatsby-code-text\">height</code>告诉对方，并把该信息对应的二进制数据放入<code class=\"gatsby-code-text\">ProtocolReactor</code>对应的<code class=\"gatsby-code-text\">sendQueue</code>通道中，等待发送。而具体的发送细节，由于逻辑比较复杂，所以在前一篇中并未详解，放到本篇中。</p>\n<p>由于<code class=\"gatsby-code-text\">sendQueue</code>是一个通道，数据放进去后，到底是由谁在什么情况下取走并发送，<code class=\"gatsby-code-text\">BlockKeeper</code>这边是不知道的。经过我们在代码中搜索，发现只有一个类型会直接监视<code class=\"gatsby-code-text\">sendQueue</code>中的数据，它就是前文出现的<code class=\"gatsby-code-text\">MConnection</code>。<code class=\"gatsby-code-text\">MConnection</code>的对象在它的<code class=\"gatsby-code-text\">OnStart</code>方法中，会监视<code class=\"gatsby-code-text\">sendQueue</code>中的数据，然后，等发现数据时，会将之取走并放入一个叫<code class=\"gatsby-code-text\">sending</code>的通道里。</p>\n<p>事情变得有点复杂了：</p>\n<ol>\n<li>由前篇我们知道，一个<code class=\"gatsby-code-text\">MConnection</code>对应了一个与peer的连接，而比原节点之间建立连接的情况又有多种：比如主动连接别的节点，或者别的节点主动连上我</li>\n<li>放入通道<code class=\"gatsby-code-text\">sending</code>之后，我们还需要知道又是谁在什么情况下会监视<code class=\"gatsby-code-text\">sending</code>，取走它里面的数据</li>\n<li><code class=\"gatsby-code-text\">sending</code>中的数据被取走后，又是如何被发送到其它节点的呢？</li>\n</ol>\n<p>还是像以前一样，遇到复杂的问题，我们先通过“相互独立，完全穷尽”的原则，把它分解成一个个小问题，然后依次解决。</p>\n<p>那么首先我们需要弄清楚的是：</p>\n<h2 id=\"比原在什么情况下，会创建mconnection的对象并调用其onstart方法？\"><a href=\"#%E6%AF%94%E5%8E%9F%E5%9C%A8%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%EF%BC%8C%E4%BC%9A%E5%88%9B%E5%BB%BAmconnection%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%B9%B6%E8%B0%83%E7%94%A8%E5%85%B6onstart%E6%96%B9%E6%B3%95%EF%BC%9F\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>比原在什么情况下，会创建<code class=\"gatsby-code-text\">MConnection</code>的对象并调用其<code class=\"gatsby-code-text\">OnStart</code>方法？</h2>\n<p>（从而我们知道<code class=\"gatsby-code-text\">sendQueue</code>中的数据是如何被监视的）</p>\n<p>经过分析，我们发现<code class=\"gatsby-code-text\">MConnection</code>的启动，只出现在一个地方，即<code class=\"gatsby-code-text\">Peer</code>的<code class=\"gatsby-code-text\">OnStart</code>方法中。那么就这个问题就变成了：比原在什么情况下，会创建<code class=\"gatsby-code-text\">Peer</code>的对象并调用其<code class=\"gatsby-code-text\">OnStart</code>方法？</p>\n<p>再经过一番折腾，终于确定，在比原中，在下列4种情况<code class=\"gatsby-code-text\">Peer.OnStart</code>方法最终会被调用：</p>\n<ol>\n<li>比原节点启动后，主动去连接配置文件指定的种子节点、以及本地数据目录中<code class=\"gatsby-code-text\">addrbook.json</code>中保存的节点的时候</li>\n<li>比原监听本地p2p端口后，有别的节点连上来的时候</li>\n<li>启动<code class=\"gatsby-code-text\">PEXReactor</code>，并使用它自己的协议与当前连接上的节点进行通信的时候</li>\n<li>在一个没有用上的<code class=\"gatsby-code-text\">Switch.Connect2Switches</code>方法中（可忽略）</li>\n</ol>\n<p>第4种情况我们完全忽略。第3种情况中，由于<code class=\"gatsby-code-text\">PEXReactor</code>会使用类似于BitTorrent的文件分享协议与其它节点分享数据，逻辑比较独立，算是一种辅助作用，我们也暂不考虑。这样我们就只需要分析前两种情况了。</p>\n<h3 id=\"比原节点启动时，是如何主动连接其它节点，并最终调用了mconnectiononstart方法的？\"><a href=\"#%E6%AF%94%E5%8E%9F%E8%8A%82%E7%82%B9%E5%90%AF%E5%8A%A8%E6%97%B6%EF%BC%8C%E6%98%AF%E5%A6%82%E4%BD%95%E4%B8%BB%E5%8A%A8%E8%BF%9E%E6%8E%A5%E5%85%B6%E5%AE%83%E8%8A%82%E7%82%B9%EF%BC%8C%E5%B9%B6%E6%9C%80%E7%BB%88%E8%B0%83%E7%94%A8%E4%BA%86mconnectiononstart%E6%96%B9%E6%B3%95%E7%9A%84%EF%BC%9F\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>比原节点启动时，是如何主动连接其它节点，并最终调用了<code class=\"gatsby-code-text\">MConnection.OnStart</code>方法的？</h3>\n<p>首先我们快速走到<code class=\"gatsby-code-text\">SyncManager.Start</code>方法:</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/cmd/bytomd/main.go#L54\">cmd/bytomd/main.go#L54</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cmd <span class=\"token operator\">:=</span> cli<span class=\"token punctuation\">.</span><span class=\"token function\">PrepareBaseCmd</span><span class=\"token punctuation\">(</span>commands<span class=\"token punctuation\">.</span>RootCmd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"TM\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">ExpandEnv</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">DefaultDataDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/cmd/bytomd/commands/run_node.go#L41\">cmd/bytomd/commands/run_node.go#L41</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">runNode</span><span class=\"token punctuation\">(</span>cmd <span class=\"token operator\">*</span>cobra<span class=\"token punctuation\">.</span>Command<span class=\"token punctuation\">,</span> args <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    n <span class=\"token operator\">:=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">NewNode</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/node/node.go#L169\">node/node.go#L169</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span>Node<span class=\"token punctuation\">)</span> <span class=\"token function\">OnStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    n<span class=\"token punctuation\">.</span>syncManager<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/netsync/handle.go#L141\">netsync/handle.go#L141</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>sm <span class=\"token operator\">*</span>SyncManager<span class=\"token punctuation\">)</span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">go</span> sm<span class=\"token punctuation\">.</span><span class=\"token function\">netStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>然后我们将进入<code class=\"gatsby-code-text\">netStart()</code>方法。在这个方法中，比原将主动连接其它节点:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>sm <span class=\"token operator\">*</span>SyncManager<span class=\"token punctuation\">)</span> <span class=\"token function\">netStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">if</span> sm<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>P2P<span class=\"token punctuation\">.</span>Seeds <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// dial out</span>\n        seeds <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span>sm<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>P2P<span class=\"token punctuation\">.</span>Seeds<span class=\"token punctuation\">,</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> sm<span class=\"token punctuation\">.</span><span class=\"token function\">DialSeeds</span><span class=\"token punctuation\">(</span>seeds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> err\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>这里出现的<code class=\"gatsby-code-text\">sm.config.P2P.Seeds</code>，对应的就是本地数据目录中<code class=\"gatsby-code-text\">config.toml</code>中的<code class=\"gatsby-code-text\">p2p.seeds</code>中的种子结点。</p>\n<p>接着通过<code class=\"gatsby-code-text\">sm.DialSeeds</code>去主动连接每个种子：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/netsync/handle.go#L229-L231\">netsync/handle.go#L229-L231</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>sm <span class=\"token operator\">*</span>SyncManager<span class=\"token punctuation\">)</span> <span class=\"token function\">DialSeeds</span><span class=\"token punctuation\">(</span>seeds <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> sm<span class=\"token punctuation\">.</span>sw<span class=\"token punctuation\">.</span><span class=\"token function\">DialSeeds</span><span class=\"token punctuation\">(</span>sm<span class=\"token punctuation\">.</span>addrBook<span class=\"token punctuation\">,</span> seeds<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/switch.go#L311-L340\">p2p/switch.go#L311-L340</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>sw <span class=\"token operator\">*</span>Switch<span class=\"token punctuation\">)</span> <span class=\"token function\">DialSeeds</span><span class=\"token punctuation\">(</span>addrBook <span class=\"token operator\">*</span>AddrBook<span class=\"token punctuation\">,</span> seeds <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>perm<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        j <span class=\"token operator\">:=</span> perm<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        sw<span class=\"token punctuation\">.</span><span class=\"token function\">dialSeed</span><span class=\"token punctuation\">(</span>netAddrs<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n   <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/switch.go#L342-L349\">p2p/switch.go#L342-L349</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>sw <span class=\"token operator\">*</span>Switch<span class=\"token punctuation\">)</span> <span class=\"token function\">dialSeed</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">*</span>NetAddress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    peer<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> sw<span class=\"token punctuation\">.</span><span class=\"token function\">DialPeerWithAddress</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/switch.go#L351-L392\">p2p/switch.go#L351-L392</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>sw <span class=\"token operator\">*</span>Switch<span class=\"token punctuation\">)</span> <span class=\"token function\">DialPeerWithAddress</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">*</span>NetAddress<span class=\"token punctuation\">,</span> persistent <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Peer<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    peer<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">newOutboundPeerWithConfig</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">.</span>reactorsByCh<span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">.</span>chDescs<span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">.</span>StopPeerForError<span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">.</span>nodePrivKey<span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">.</span>peerConfig<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n    err <span class=\"token operator\">=</span> sw<span class=\"token punctuation\">.</span><span class=\"token function\">AddPeer</span><span class=\"token punctuation\">(</span>peer<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>先是通过<code class=\"gatsby-code-text\">newOutboundPeerWithConfig</code>创建了<code class=\"gatsby-code-text\">peer</code>，然后把它加入到<code class=\"gatsby-code-text\">sw</code>（即<code class=\"gatsby-code-text\">Switch</code>对象）中。</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/switch.go#L226-L275\">p2p/switch.go#L226-L275</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>sw <span class=\"token operator\">*</span>Switch<span class=\"token punctuation\">)</span> <span class=\"token function\">AddPeer</span><span class=\"token punctuation\">(</span>peer <span class=\"token operator\">*</span>Peer<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token comment\">// Start peer</span>\n    <span class=\"token keyword\">if</span> sw<span class=\"token punctuation\">.</span><span class=\"token function\">IsRunning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> sw<span class=\"token punctuation\">.</span><span class=\"token function\">startInitPeer</span><span class=\"token punctuation\">(</span>peer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> err\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>在<code class=\"gatsby-code-text\">sw.startInitPeer</code>中，将会调用<code class=\"gatsby-code-text\">peer.Start</code>：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/switch.go#L300-L308\">p2p/switch.go#L300-L308</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>sw <span class=\"token operator\">*</span>Switch<span class=\"token punctuation\">)</span> <span class=\"token function\">startInitPeer</span><span class=\"token punctuation\">(</span>peer <span class=\"token operator\">*</span>Peer<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    peer<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>而<code class=\"gatsby-code-text\">peer.Start</code>对应了<code class=\"gatsby-code-text\">Peer.OnStart</code>，最后就是:</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/peer.go#L207-L211\">p2p/peer.go#L207-L211</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>Peer<span class=\"token punctuation\">)</span> <span class=\"token function\">OnStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    p<span class=\"token punctuation\">.</span>BaseService<span class=\"token punctuation\">.</span><span class=\"token function\">OnStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> p<span class=\"token punctuation\">.</span>mconn<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> err\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>可以看到，在这里调用了<code class=\"gatsby-code-text\">mconn.Start</code>，终于找到了。总结一下就是：</p>\n<ul>\n<li><code class=\"gatsby-code-text\">Node.Start</code> -> <code class=\"gatsby-code-text\">SyncManager.Start</code> -> <code class=\"gatsby-code-text\">SyncManager.netStart</code> ->  <code class=\"gatsby-code-text\">Switch.DialSeeds</code> -> <code class=\"gatsby-code-text\">Switch.AddPeer</code> -> <code class=\"gatsby-code-text\">Switch.startInitPeer</code> -> <code class=\"gatsby-code-text\">Peer.OnStart</code> -> <code class=\"gatsby-code-text\">MConnection.OnStart</code></li>\n</ul>\n<p>那么，第一种主动连接别的节点的情况就到这里分析完了。下面是第二种情况：</p>\n<h3 id=\"当别的节点连接到本节点时，比原是如何走到mconnectiononstart方法这一步的？\"><a href=\"#%E5%BD%93%E5%88%AB%E7%9A%84%E8%8A%82%E7%82%B9%E8%BF%9E%E6%8E%A5%E5%88%B0%E6%9C%AC%E8%8A%82%E7%82%B9%E6%97%B6%EF%BC%8C%E6%AF%94%E5%8E%9F%E6%98%AF%E5%A6%82%E4%BD%95%E8%B5%B0%E5%88%B0mconnectiononstart%E6%96%B9%E6%B3%95%E8%BF%99%E4%B8%80%E6%AD%A5%E7%9A%84%EF%BC%9F\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>当别的节点连接到本节点时，比原是如何走到<code class=\"gatsby-code-text\">MConnection.OnStart</code>方法这一步的？</h3>\n<p>比原节点启动后，会监听本地的p2p端口，等待别的节点连接上来。那么这个流程又是什么样的呢？</p>\n<p>由于比原节点的启动流程在目前的文章中已经多次出现，这里就不贴了，我们直接从<code class=\"gatsby-code-text\">Switch.OnStart</code>开始（它是在<code class=\"gatsby-code-text\">SyncManager</code>启动的时候启动的）：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/switch.go#L186-L185\">p2p/switch.go#L186-L185</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>sw <span class=\"token operator\">*</span>Switch<span class=\"token punctuation\">)</span> <span class=\"token function\">OnStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> peer <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> sw<span class=\"token punctuation\">.</span>peers<span class=\"token punctuation\">.</span><span class=\"token function\">List</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sw<span class=\"token punctuation\">.</span><span class=\"token function\">startInitPeer</span><span class=\"token punctuation\">(</span>peer<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// Start listeners</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> listener <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> sw<span class=\"token punctuation\">.</span>listeners <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">go</span> sw<span class=\"token punctuation\">.</span><span class=\"token function\">listenerRoutine</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>这个方法经过省略以后，还剩两块代码，一块是<code class=\"gatsby-code-text\">startInitPeer(...)</code>，一块是<code class=\"gatsby-code-text\">sw.listenerRoutine(listener)</code>。</p>\n<p>如果你刚才在读前一节时留意了，就会发现，<code class=\"gatsby-code-text\">startInitPeer(...)</code>方法马上就会调用<code class=\"gatsby-code-text\">Peer.Start</code>。然而在这里需要说明的是，经过我的分析，发现这块代码实际上没有起到任何作用，因为在当前这个时刻，<code class=\"gatsby-code-text\">sw.peers</code>总是空的，它里面还没有来得及被其它的代码添加进peer。所以我觉得它可以删掉，以免误导读者。（提了一个issue，参见<a href=\"https://github.com/Bytom/bytom/issues/902\">#902</a>）</p>\n<p>第二块代码，<code class=\"gatsby-code-text\">listenerRoutine</code>，如果你还有印象的话，它就是用来监听本地p2p端口的，在前面“比原是如何监听p2p端口的”一文中有详细的讲解。</p>\n<p>我们今天还是需要再挖掘一下它，看看它到底是怎么走到<code class=\"gatsby-code-text\">MConnection.OnStart</code>的：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/switch.go#L498-L536\">p2p/switch.go#L498-L536</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>sw <span class=\"token operator\">*</span>Switch<span class=\"token punctuation\">)</span> <span class=\"token function\">listenerRoutine</span><span class=\"token punctuation\">(</span>l Listener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        inConn<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">Connections</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// ...</span>\n        err <span class=\"token operator\">:=</span> sw<span class=\"token punctuation\">.</span><span class=\"token function\">addPeerWithConnectionAndConfig</span><span class=\"token punctuation\">(</span>inConn<span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">.</span>peerConfig<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>这里的<code class=\"gatsby-code-text\">l</code>就是监听本地p2p端口的Listener。通过一个<code class=\"gatsby-code-text\">for</code>循环，拿到连接到该端口的节点的连接，生成新peer。</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>sw <span class=\"token operator\">*</span>Switch<span class=\"token punctuation\">)</span> <span class=\"token function\">addPeerWithConnectionAndConfig</span><span class=\"token punctuation\">(</span>conn net<span class=\"token punctuation\">.</span>Conn<span class=\"token punctuation\">,</span> config <span class=\"token operator\">*</span>PeerConfig<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    peer<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">newInboundPeerWithConfig</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">.</span>reactorsByCh<span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">.</span>chDescs<span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">.</span>StopPeerForError<span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">.</span>nodePrivKey<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">=</span> sw<span class=\"token punctuation\">.</span><span class=\"token function\">AddPeer</span><span class=\"token punctuation\">(</span>peer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>生成新的peer之后，调用了<code class=\"gatsby-code-text\">Switch</code>的<code class=\"gatsby-code-text\">AddPeer</code>方法。到了这里，就跟前一节一样了，在<code class=\"gatsby-code-text\">AddPeer</code>中将调用<code class=\"gatsby-code-text\">sw.startInitPeer(peer)</code>，然后调用<code class=\"gatsby-code-text\">peer.Start()</code>，最后调用了<code class=\"gatsby-code-text\">MConnection.OnStart()</code>。由于代码一模一样，就不贴出来了。</p>\n<p>总结一下，就是：</p>\n<ul>\n<li><code class=\"gatsby-code-text\">Node.Start</code> -> <code class=\"gatsby-code-text\">SyncManager.Start</code> -> <code class=\"gatsby-code-text\">SyncManager.netStart</code> -> <code class=\"gatsby-code-text\">Switch.OnStart</code> -> <code class=\"gatsby-code-text\">Switch.listenerRoutine</code> -> <code class=\"gatsby-code-text\">Switch.addPeerWithConnectionAndConfig</code> -> <code class=\"gatsby-code-text\">Switch.AddPeer</code> -> <code class=\"gatsby-code-text\">Switch.startInitPeer</code> -> <code class=\"gatsby-code-text\">Peer.OnStart</code> -> <code class=\"gatsby-code-text\">MConnection.OnStart</code></li>\n</ul>\n<p>那么，第二种情况我们也分析完了。</p>\n<p>不过到目前为止，我们只解决了这次问题中的第一个小问题，即：我们终于知道了比原代码会在什么情况来启动一个<code class=\"gatsby-code-text\">MConnection</code>，从而监视<code class=\"gatsby-code-text\">sendQueue</code>通道，把要发送的信息数据，转到了<code class=\"gatsby-code-text\">sending</code>通道中。</p>\n<p>那么，我们进入下一个小问题：</p>\n<h2 id=\"数据放入通道sending之后，谁又会来取走它们呢？\"><a href=\"#%E6%95%B0%E6%8D%AE%E6%94%BE%E5%85%A5%E9%80%9A%E9%81%93sending%E4%B9%8B%E5%90%8E%EF%BC%8C%E8%B0%81%E5%8F%88%E4%BC%9A%E6%9D%A5%E5%8F%96%E8%B5%B0%E5%AE%83%E4%BB%AC%E5%91%A2%EF%BC%9F\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>数据放入通道<code class=\"gatsby-code-text\">sending</code>之后，谁又会来取走它们呢？</h2>\n<p>经过分析之后，发现通道<code class=\"gatsby-code-text\">sendQueue</code>和<code class=\"gatsby-code-text\">sending</code>都属于类型<code class=\"gatsby-code-text\">Channel</code>，只不过两者作用不同。<code class=\"gatsby-code-text\">sendQueue</code>是用来存放待发送的完整的信息数据，而<code class=\"gatsby-code-text\">sending</code>更底层一些，它持有的数据可能会被分成多个块发送。如果只有<code class=\"gatsby-code-text\">sendQueue</code>一个通道，那么很难实现分块的操作的。</p>\n<p>而<code class=\"gatsby-code-text\">Channel</code>的发送是由<code class=\"gatsby-code-text\">MConnection</code>来调用的，幸运的是，当我们一直往回追溯下去，发现竟走到了<code class=\"gatsby-code-text\">MConnection.OnStart</code>这里。也就是说，我们在这个小问题中，研究的正好是前面两个链条后面的部分：</p>\n<ul>\n<li>\n<p><code class=\"gatsby-code-text\">Node.Start</code> -> <code class=\"gatsby-code-text\">SyncManager.Start</code> -> <code class=\"gatsby-code-text\">SyncManager.netStart</code> ->  <code class=\"gatsby-code-text\">Switch.DialSeeds</code> -> <code class=\"gatsby-code-text\">Switch.AddPeer</code> -> <code class=\"gatsby-code-text\">Switch.startInitPeer</code> -> <code class=\"gatsby-code-text\">Peer.OnStart</code> -> <code class=\"gatsby-code-text\">MConnection.OnStart</code> -> <code class=\"gatsby-code-text\">???</code></p>\n</li>\n<li>\n<p><code class=\"gatsby-code-text\">Node.Start</code> -> <code class=\"gatsby-code-text\">SyncManager.Start</code> -> <code class=\"gatsby-code-text\">SyncManager.netStart</code> -> <code class=\"gatsby-code-text\">Switch.OnStart</code> -> <code class=\"gatsby-code-text\">Switch.listenerRoutine</code> -> <code class=\"gatsby-code-text\">Switch.addPeerWithConnectionAndConfig</code> -> <code class=\"gatsby-code-text\">Switch.AddPeer</code> -> <code class=\"gatsby-code-text\">Switch.startInitPeer</code> -> <code class=\"gatsby-code-text\">Peer.OnStart</code> -> <code class=\"gatsby-code-text\">MConnection.OnStart</code> -> <code class=\"gatsby-code-text\">???</code></p>\n</li>\n</ul>\n<p>也就是上面的<code class=\"gatsby-code-text\">???</code>部分。</p>\n<p>那么我们就直接从<code class=\"gatsby-code-text\">MConnection.OnStart</code>开始：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/connection.go#L152-L159\">p2p/connection.go#L152-L159</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>MConnection<span class=\"token punctuation\">)</span> <span class=\"token function\">OnStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">go</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">sendRoutine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><code class=\"gatsby-code-text\">c.sendRoutine()</code>方法就是我们需要的。当<code class=\"gatsby-code-text\">MConnection</code>启动以后，就会开始进行发送操作（等待数据到来)。它的代码如下：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/connection.go#L289-L343\">p2p/connection.go#L289-L343</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>MConnection<span class=\"token punctuation\">)</span> <span class=\"token function\">sendRoutine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>c<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\">// Send some msgPackets</span>\n            eof <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">sendSomeMsgPackets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>eof <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// Keep sendRoutine awake.</span>\n                <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">case</span> c<span class=\"token punctuation\">.</span>send <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>这个方法本来很长，只是我们省略掉了很多无关的代码。里面的<code class=\"gatsby-code-text\">c.sendSomeMsgPackets()</code>就是我们要找的，但是，我们突然发现，怎么又出来了一个<code class=\"gatsby-code-text\">c.send</code>通道？它又有什么用？而且看起来好像只有当这个通道里有东西的时候，我们才会去调用<code class=\"gatsby-code-text\">c.sendSomeMsgPackets()</code>，似乎像是一个铃铛一样用来提醒我们。</p>\n<p>那么<code class=\"gatsby-code-text\">c.send</code>什么时候会有东西呢？检查了代码之后，发现在以下3个地方：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/connection.go#L206-L239\">p2p/connection.go#L206-L239</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>MConnection<span class=\"token punctuation\">)</span> <span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>chID <span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> msg <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    success <span class=\"token operator\">:=</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">sendBytes</span><span class=\"token punctuation\">(</span>wire<span class=\"token punctuation\">.</span><span class=\"token function\">BinaryBytes</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> success <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Wake up sendRoutine if necessary</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> c<span class=\"token punctuation\">.</span>send <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/connection.go#L243-L271\">p2p/connection.go#L243-L271</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>MConnection<span class=\"token punctuation\">)</span> <span class=\"token function\">TrySend</span><span class=\"token punctuation\">(</span>chID <span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> msg <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    ok <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">trySendBytes</span><span class=\"token punctuation\">(</span>wire<span class=\"token punctuation\">.</span><span class=\"token function\">BinaryBytes</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> ok <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Wake up sendRoutine if necessary</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> c<span class=\"token punctuation\">.</span>send <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/connection.go#L289-L343\">p2p/connection.go#L289-L343</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>MConnection<span class=\"token punctuation\">)</span> <span class=\"token function\">sendRoutine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ....</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>c<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\">// Send some msgPackets</span>\n            eof <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">sendSomeMsgPackets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>eof <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// Keep sendRoutine awake.</span>\n                <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">case</span> c<span class=\"token punctuation\">.</span>send <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>如果我们对前一篇文章还有印象，就会记得<code class=\"gatsby-code-text\">channel.trySendBytes</code>是在我们想给对方节点发信息时调用的，调用完以后，它会把信息对应的二进制数据放入到<code class=\"gatsby-code-text\">channel.sendQueue</code>通道（所以才有了本文）。<code class=\"gatsby-code-text\">channel.sendBytes</code>我们目前虽然还没用到，但是它也应该是类似的。在它们两个调用完之后，它们都会向<code class=\"gatsby-code-text\">c.send</code>通道里放入一个数据，用来通知<code class=\"gatsby-code-text\">Channel</code>有数据可以发送了。</p>\n<p>而第三个<code class=\"gatsby-code-text\">sendRoutine()</code>就是我们刚刚走到的地方。当我们调用<code class=\"gatsby-code-text\">c.sendSomeMsgPackets()</code>发送了<code class=\"gatsby-code-text\">sending</code>中的一部分之后，如果还有剩余的，则继续向<code class=\"gatsby-code-text\">c.send</code>放个数据，提醒可以继续发送。</p>\n<p>那到目前为止，发送数据涉及到的Channel就有三个了，分别是<code class=\"gatsby-code-text\">sendQueue</code>、<code class=\"gatsby-code-text\">sending</code>和<code class=\"gatsby-code-text\">send</code>。之所以这么复杂，根本原因就是想把数据分块发送。</p>\n<p>为什么要分块发送呢？这是因为比原希望能控制发送速率，让节点之间的网速能保持在一个合理的水平。如果不限制的话，一下子发出大量的数据，一是可能会让接收者来不及处理，二是有可能会被恶意节点利用，请求大量区块数据把带宽占满。</p>\n<p>担心<code class=\"gatsby-code-text\">sendQueue</code>、<code class=\"gatsby-code-text\">sending</code>和<code class=\"gatsby-code-text\">send</code>这三个通道不太好理解，我想到了一个“烧鸭店”的比喻，来理解它们：</p>\n<ul>\n<li><code class=\"gatsby-code-text\">sendQueue</code>就像是用来挂烤好的烧鸭的勾子，可以有多个（但对于比原来说，默认只有一个，因为<code class=\"gatsby-code-text\">sendQueue</code>的容量默认为<code class=\"gatsby-code-text\">1</code>），当有烧鸭烤好以后，就挂在勾子上；</li>\n<li><code class=\"gatsby-code-text\">sending</code>是砧板，可以把烧鸭从<code class=\"gatsby-code-text\">sendQueue</code>勾子上取下来一只，放在上面切成块，等待装盘，一只烧鸭可能可以装成好几盘；</li>\n<li>而<code class=\"gatsby-code-text\">send</code>是铃铛，当有人点单后，服务员就会按一下铃铛，厨师就从<code class=\"gatsby-code-text\">sending</code>砧板上拿几块烧鸭放在小盘中放在出餐口。由于厨师非常忙，每次切出一盘后都可能会去做别的事情，而忘了<code class=\"gatsby-code-text\">sending</code>砧板上还有烧鸭没装盘，所以为了防止自己忘记，他每切出一盘之后，都会看一眼<code class=\"gatsby-code-text\">sending</code>砧板，如果还有肉，就会按一下铃铛提醒自己继续装盘。</li>\n</ul>\n<p>好了，理解了<code class=\"gatsby-code-text\">send</code>后，我们就可以回到主线，继续看<code class=\"gatsby-code-text\">c.sendSomeMsgPackets()</code>的代码了：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/connection.go#L347-L360\">p2p/connection.go#L347-L360</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>MConnection<span class=\"token punctuation\">)</span> <span class=\"token function\">sendSomeMsgPackets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Block until .sendMonitor says we can write.</span>\n    <span class=\"token comment\">// Once we're ready we send more than we asked for,</span>\n    <span class=\"token comment\">// but amortized it should even out.</span>\n    c<span class=\"token punctuation\">.</span>sendMonitor<span class=\"token punctuation\">.</span><span class=\"token function\">Limit</span><span class=\"token punctuation\">(</span>maxMsgPacketTotalSize<span class=\"token punctuation\">,</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">LoadInt64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>SendRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Now send some msgPackets.</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numBatchMsgPackets<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">sendMsgPacket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><code class=\"gatsby-code-text\">c.sendMonitor.Limit</code>的作用是限制发送速率，其中<code class=\"gatsby-code-text\">maxMsgPacketTotalSize</code>即每个packet的最大长度为常量<code class=\"gatsby-code-text\">10240</code>，第二个参数是预先指定的发送速率，默认值为<code class=\"gatsby-code-text\">500KB/s</code>，第三个参数是说，当实际速度过大时，是否暂停发送，直到变得正常。</p>\n<p>经过限速的调整后，后面一段就可以正常发送数据了，其中的<code class=\"gatsby-code-text\">c.sendMsgPacket</code>是我们继续要看的方法：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/connection.go#L363-L398\">p2p/connection.go#L363-L398</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>MConnection<span class=\"token punctuation\">)</span> <span class=\"token function\">sendMsgPacket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    n<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> leastChannel<span class=\"token punctuation\">.</span><span class=\"token function\">writeMsgPacketTo</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>bufWriter<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ..</span>\n    c<span class=\"token punctuation\">.</span>sendMonitor<span class=\"token punctuation\">.</span><span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>这个方法最前面我省略了一大段代码，其作用是检查多个channel，结合它们的优先级和已经发的数据量，找到当前最需要发送数据的那个channel，记为<code class=\"gatsby-code-text\">leastChannel</code>。</p>\n<p>然后就是调用<code class=\"gatsby-code-text\">leastChannel.writeMsgPacketTo(c.bufWriter)</code>，把当前要发送的一块数据，写到<code class=\"gatsby-code-text\">bufWriter</code>中。这个<code class=\"gatsby-code-text\">bufWriter</code>就是真正与连接对象绑定的一个缓存区，写入到它里面的数据，会被Go发送出去。它的定义是在创建<code class=\"gatsby-code-text\">MConnection</code>的地方：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/connection.go#L114-L118\">p2p/connection.go#L114-L118</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">NewMConnectionWithConfig</span><span class=\"token punctuation\">(</span>conn net<span class=\"token punctuation\">.</span>Conn<span class=\"token punctuation\">,</span> chDescs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>ChannelDescriptor<span class=\"token punctuation\">,</span> onReceive receiveCbFunc<span class=\"token punctuation\">,</span> onError errorCbFunc<span class=\"token punctuation\">,</span> config <span class=\"token operator\">*</span>MConnConfig<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>MConnection <span class=\"token punctuation\">{</span>\n    mconn <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>MConnection<span class=\"token punctuation\">{</span>\n        conn<span class=\"token punctuation\">:</span>        conn<span class=\"token punctuation\">,</span>\n        bufReader<span class=\"token punctuation\">:</span>   bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewReaderSize</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> minReadBufferSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        bufWriter<span class=\"token punctuation\">:</span>   bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewWriterSize</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> minWriteBufferSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></code></pre>\n      </div>\n<p>其中<code class=\"gatsby-code-text\">minReadBufferSize</code>为<code class=\"gatsby-code-text\">1024</code>，<code class=\"gatsby-code-text\">minWriteBufferSize</code>为<code class=\"gatsby-code-text\">65536</code>。</p>\n<p>数据写到<code class=\"gatsby-code-text\">bufWriter</code>以后，我们就不需要关心了，交给Go来操作了。</p>\n<p>在<code class=\"gatsby-code-text\">leastChannel.writeMsgPacketTo(c.bufWriter)</code>调用完以后，后面会更新<code class=\"gatsby-code-text\">c.sendMonitor</code>，这样它才能继续正确的限速。</p>\n<p>这时我们已经知道数据是怎么发出去的了，但是我们还没有找到是谁在监视<code class=\"gatsby-code-text\">sending</code>里的数据，那让我们继续看<code class=\"gatsby-code-text\">leastChannel.writeMsgPacketTo</code>：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/connection.go#L655-L663\">p2p/connection.go#L655-L663</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">*</span>Channel<span class=\"token punctuation\">)</span> <span class=\"token function\">writeMsgPacketTo</span><span class=\"token punctuation\">(</span>w io<span class=\"token punctuation\">.</span>Writer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    packet <span class=\"token operator\">:=</span> ch<span class=\"token punctuation\">.</span><span class=\"token function\">nextMsgPacket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    wire<span class=\"token punctuation\">.</span><span class=\"token function\">WriteByte</span><span class=\"token punctuation\">(</span>packetTypeMsg<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>err<span class=\"token punctuation\">)</span>\n    wire<span class=\"token punctuation\">.</span><span class=\"token function\">WriteBinary</span><span class=\"token punctuation\">(</span>packet<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        ch<span class=\"token punctuation\">.</span>recentlySent <span class=\"token operator\">+=</span> <span class=\"token function\">int64</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>其中的<code class=\"gatsby-code-text\">ch.nextMsgPacket()</code>是取出下一个要发送的数据块，那么是从哪里取出呢？是从<code class=\"gatsby-code-text\">sending</code>吗？</p>\n<p>其后的代码是把数据块对象变成二进制，放入到前面的<code class=\"gatsby-code-text\">bufWriter</code>中发送。</p>\n<p>继续<code class=\"gatsby-code-text\">ch.nextMsgPacket()</code>：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/connection.go#L638-L651\">p2p/connection.go#L638-L651</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">*</span>Channel<span class=\"token punctuation\">)</span> <span class=\"token function\">nextMsgPacket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> msgPacket <span class=\"token punctuation\">{</span>\n    packet <span class=\"token operator\">:=</span> msgPacket<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    packet<span class=\"token punctuation\">.</span>ChannelID <span class=\"token operator\">=</span> <span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    packet<span class=\"token punctuation\">.</span>Bytes <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">.</span>sending<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>cmn<span class=\"token punctuation\">.</span><span class=\"token function\">MinInt</span><span class=\"token punctuation\">(</span>maxMsgPacketPayloadSize<span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">.</span>sending<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">.</span>sending<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> maxMsgPacketPayloadSize <span class=\"token punctuation\">{</span>\n        packet<span class=\"token punctuation\">.</span>EOF <span class=\"token operator\">=</span> <span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x01</span><span class=\"token punctuation\">)</span>\n        ch<span class=\"token punctuation\">.</span>sending <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n        atomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddInt32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">.</span>sendQueueSize<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// decrement sendQueueSize</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        packet<span class=\"token punctuation\">.</span>EOF <span class=\"token operator\">=</span> <span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">)</span>\n        ch<span class=\"token punctuation\">.</span>sending <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">.</span>sending<span class=\"token punctuation\">[</span>cmn<span class=\"token punctuation\">.</span><span class=\"token function\">MinInt</span><span class=\"token punctuation\">(</span>maxMsgPacketPayloadSize<span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">.</span>sending<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> packet\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>终于看到<code class=\"gatsby-code-text\">sending</code>了。从这里可以看出，<code class=\"gatsby-code-text\">sending</code>的确是放着很多块鸭肉的砧板，而<code class=\"gatsby-code-text\">packet</code>就是一个小盘，所以需要从先<code class=\"gatsby-code-text\">sending</code>中拿出不超过指定长度的数据放到<code class=\"gatsby-code-text\">packet</code>中，然后判断<code class=\"gatsby-code-text\">sending</code>里还有没有剩下的。如果有，则<code class=\"gatsby-code-text\">packet</code>的<code class=\"gatsby-code-text\">EOF</code>值为<code class=\"gatsby-code-text\">0x00</code>，否则为<code class=\"gatsby-code-text\">0x01</code>，这样调用者就知道数据有没有发完，还需不需要去按那个叫<code class=\"gatsby-code-text\">send</code>的铃。</p>\n<p>那么到这里为止，我们就知道原来还是Channel自己在关注<code class=\"gatsby-code-text\">sending</code>，并且为了限制发送速度，需要把它切成一个个小块。</p>\n<p>最后就我们的第三个小问题了，其实我们刚才在第二问里已经弄清楚了。</p>\n<h2 id=\"sending中的数据被取走后，又是如何被发送到其它节点的呢？\"><a href=\"#sending%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%A2%AB%E5%8F%96%E8%B5%B0%E5%90%8E%EF%BC%8C%E5%8F%88%E6%98%AF%E5%A6%82%E4%BD%95%E8%A2%AB%E5%8F%91%E9%80%81%E5%88%B0%E5%85%B6%E5%AE%83%E8%8A%82%E7%82%B9%E7%9A%84%E5%91%A2%EF%BC%9F\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"gatsby-code-text\">sending</code>中的数据被取走后，又是如何被发送到其它节点的呢？</h2>\n<p>答案就是，<code class=\"gatsby-code-text\">sending</code>中的数据被分成一块块取出来后，会放入到<code class=\"gatsby-code-text\">bufWriter</code>中，就直接被Go的<code class=\"gatsby-code-text\">net.Conn</code>对象发送出去了。到这一层面，就不需要我们再继续深入了。</p>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>由于本篇中涉及的方法调用比较多，可能看完都乱了，所以在最后，我们前面调用链补充完整，放在最后：</p>\n<ul>\n<li>\n<p><code class=\"gatsby-code-text\">Node.Start</code> -> <code class=\"gatsby-code-text\">SyncManager.Start</code> -> <code class=\"gatsby-code-text\">SyncManager.netStart</code> ->  <code class=\"gatsby-code-text\">Switch.DialSeeds</code> -> <code class=\"gatsby-code-text\">Switch.AddPeer</code> -> <code class=\"gatsby-code-text\">Switch.startInitPeer</code> -> <code class=\"gatsby-code-text\">Peer.OnStart</code> -> <code class=\"gatsby-code-text\">MConnection.OnStart</code> -> <code class=\"gatsby-code-text\">...</code></p>\n</li>\n<li>\n<p><code class=\"gatsby-code-text\">Node.Start</code> -> <code class=\"gatsby-code-text\">SyncManager.Start</code> -> <code class=\"gatsby-code-text\">SyncManager.netStart</code> -> <code class=\"gatsby-code-text\">Switch.OnStart</code> -> <code class=\"gatsby-code-text\">Switch.listenerRoutine</code> -> <code class=\"gatsby-code-text\">Switch.addPeerWithConnectionAndConfig</code> -> <code class=\"gatsby-code-text\">Switch.AddPeer</code> -> <code class=\"gatsby-code-text\">Switch.startInitPeer</code> -> <code class=\"gatsby-code-text\">Peer.OnStart</code> -> <code class=\"gatsby-code-text\">MConnection.OnStart</code> -> <code class=\"gatsby-code-text\">...</code></p>\n</li>\n</ul>\n<p>然后是：</p>\n<ul>\n<li><code class=\"gatsby-code-text\">MConnection.sendRoutine</code> -> <code class=\"gatsby-code-text\">MConnection.send</code> -> <code class=\"gatsby-code-text\">MConnection.sendSomeMsgPackets</code> -> <code class=\"gatsby-code-text\">MConnection.sendMsgPacket</code> -> <code class=\"gatsby-code-text\">MConnection.writeMsgPacketTo</code> -> <code class=\"gatsby-code-text\">MConnection.nextMsgPacket</code> -> <code class=\"gatsby-code-text\">MConnection.sending</code></li>\n</ul>\n<p>到了最后，我的感觉就是，一个复杂问题最开始看起来很可怕，但是一旦把它分解成小问题之后，每次只关注一个，各个击破，好像就没那么复杂了。</p>\n<hr>\n<p>如果你觉得这些文章对你非常有用，控制不住想打赏作者，可以有以下选择：</p>\n<ol>\n<li>BTM: <code class=\"gatsby-code-text\">0x6bcCfb7265d4aB0C1a71F7d19b9E581cae73D777</code></li>\n<li>BTC: <code class=\"gatsby-code-text\">1Af2Q23Y1kqgtgbryzjS7RxrnEmyvYuX4b</code></li>\n<li>ETH: <code class=\"gatsby-code-text\">0x6bcCfb7265d4aB0C1a71F7d19b9E581cae73D777</code></li>\n</ol>\n<p>多少请随意，心意最重要，我们一起努力吧！</p>","frontmatter":{"title":"把请求区块数据的信息发出去","next":null,"prev":null},"fields":{"path":null,"slug":"docs/bytomanalysis-howto-senddata.html"}}},"pathContext":{"slug":"docs/bytomanalysis-howto-senddata.html"}}