{"data":{"markdownRemark":{"html":"<p>当我们以<code class=\"gatsby-code-text\">bytom init --chain_id=solonet</code>建立比原单机节点用于本地测试时，很快会发现自己将面临一个尴尬的问题：余额为0。就算我们使用<code class=\"gatsby-code-text\">bytom node --mining</code>开启挖矿，理论上由于我们是单机状态，本机算力就是全网算力，应该每次都能够挖到，但是不知道为什么，在我尝试的时候发现总是挖不到，所以打算简单研究一下比原的挖矿流程，看看有没有办法能改点什么，给自己单机多挖点BTM以方便后面的测试。</p>\n<p>所以在今天我打算通过源代码分析一下比原的挖矿流程，但是考虑到它肯定会涉及到比原的核心，所以太复杂的地方我就会先跳过，那些地方时机成熟的时候会彻底研究一下。</p>\n<p>如果我们快速搜索一下，就能发现在比原代码中有一个类型叫<code class=\"gatsby-code-text\">CPUMiner</code>，我们围绕着它应该就可以了。</p>\n<p>首先还是从比原启动开始，看看<code class=\"gatsby-code-text\">CPUMiner</code>是如何被启动的。</p>\n<p>下面是<code class=\"gatsby-code-text\">bytom node --mining</code>对应的入口函数：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/cmd/bytomd/main.go#L54-L57\">cmd/bytomd/main.go#L54-L57</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cmd <span class=\"token operator\">:=</span> cli<span class=\"token punctuation\">.</span><span class=\"token function\">PrepareBaseCmd</span><span class=\"token punctuation\">(</span>commands<span class=\"token punctuation\">.</span>RootCmd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"TM\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">ExpandEnv</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">DefaultDataDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>由于传入了参数<code class=\"gatsby-code-text\">node</code>，所以创建Node并启动：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/cmd/bytomd/commands/run_node.go#L41-L54\">cmd/bytomd/commands/run_node.go#L41-L54</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">runNode</span><span class=\"token punctuation\">(</span>cmd <span class=\"token operator\">*</span>cobra<span class=\"token punctuation\">.</span>Command<span class=\"token punctuation\">,</span> args <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Create &amp; start node</span>\n    n <span class=\"token operator\">:=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">NewNode</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>在创建一个Node对象的时候，也会创建<code class=\"gatsby-code-text\">CPUMiner</code>对象：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/node/node.go#L59-L142\">node/node.go#L59-L142</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">NewNode</span><span class=\"token punctuation\">(</span>config <span class=\"token operator\">*</span>cfg<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Node <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    node<span class=\"token punctuation\">.</span>cpuMiner <span class=\"token operator\">=</span> cpuminer<span class=\"token punctuation\">.</span><span class=\"token function\">NewCPUMiner</span><span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">,</span> accounts<span class=\"token punctuation\">,</span> txPool<span class=\"token punctuation\">,</span> newBlockCh<span class=\"token punctuation\">)</span>\n    node<span class=\"token punctuation\">.</span>miningPool <span class=\"token operator\">=</span> miningpool<span class=\"token punctuation\">.</span><span class=\"token function\">NewMiningPool</span><span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">,</span> accounts<span class=\"token punctuation\">,</span> txPool<span class=\"token punctuation\">,</span> newBlockCh<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">return</span> node\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>这里可以看到创建了两个与挖矿相关的东西，一个是<code class=\"gatsby-code-text\">NewCPUMiner</code>，另一个是<code class=\"gatsby-code-text\">miningPool</code>。我们先看<code class=\"gatsby-code-text\">NewCPUMiner</code>对应的代码：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/mining/cpuminer/cpuminer.go#L282-L293\">mining/cpuminer/cpuminer.go#L282-L293</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">NewCPUMiner</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>protocol<span class=\"token punctuation\">.</span>Chain<span class=\"token punctuation\">,</span> accountManager <span class=\"token operator\">*</span>account<span class=\"token punctuation\">.</span>Manager<span class=\"token punctuation\">,</span> txPool <span class=\"token operator\">*</span>protocol<span class=\"token punctuation\">.</span>TxPool<span class=\"token punctuation\">,</span> newBlockCh <span class=\"token keyword\">chan</span> <span class=\"token operator\">*</span>bc<span class=\"token punctuation\">.</span>Hash<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>CPUMiner <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>CPUMiner<span class=\"token punctuation\">{</span>\n        chain<span class=\"token punctuation\">:</span>             c<span class=\"token punctuation\">,</span>\n        accountManager<span class=\"token punctuation\">:</span>    accountManager<span class=\"token punctuation\">,</span>\n        txPool<span class=\"token punctuation\">:</span>            txPool<span class=\"token punctuation\">,</span>\n        numWorkers<span class=\"token punctuation\">:</span>        defaultNumWorkers<span class=\"token punctuation\">,</span>\n        updateNumWorkers<span class=\"token punctuation\">:</span>  <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        queryHashesPerSec<span class=\"token punctuation\">:</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        updateHashes<span class=\"token punctuation\">:</span>      <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        newBlockCh<span class=\"token punctuation\">:</span>        newBlockCh<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>从这里的字段可以看到，CPUMiner在工作的时候：</p>\n<ul>\n<li>可能需要用到外部的三个对象分别是：<code class=\"gatsby-code-text\">chain</code>（代表本机持有的区块链），<code class=\"gatsby-code-text\">accountManager</code>（管理帐户），<code class=\"gatsby-code-text\">txPool</code>（交易池）</li>\n<li><code class=\"gatsby-code-text\">numWorkers</code>：应该保持几个worker在挖矿，默认值<code class=\"gatsby-code-text\">defaultNumWorkers</code>为常量<code class=\"gatsby-code-text\">1</code>，也就是说默认只有一个worker。这对于多核cpu来说有点亏，真要挖矿的话可以把它改大点，跟核心数相同（不过用普通电脑不太可能挖到了）</li>\n<li><code class=\"gatsby-code-text\">updateNumWorkers</code>：外界如果想改变worker的数量，可以通过向这个通道发消息实现。CPUMiner会监听它，并按要求增减worker</li>\n<li><code class=\"gatsby-code-text\">queryHashesPerSec</code>：这个没用上，忽略吧。我发现比原的开发人员很喜欢预先设计，有很多这样没用上的代码</li>\n<li><code class=\"gatsby-code-text\">updateHashes</code>: 这个没用上，忽略</li>\n<li><code class=\"gatsby-code-text\">newBlockCh</code>: 一个来自外部的通道，用来告诉外面自己成功挖到了块，并且已经放进了本地区块链，其它地方就可以用它了（比如广播出去）</li>\n</ul>\n<p>然而这里出现的并不是<code class=\"gatsby-code-text\">CPUMiner</code>全部的字段，仅仅是需要特意初始化的几个。完整的在这里:</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/mining/cpuminer/cpuminer.go#L29-L45\">mining/cpuminer/cpuminer.go#L29-L45</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">type</span> CPUMiner <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    sync<span class=\"token punctuation\">.</span>Mutex\n    chain             <span class=\"token operator\">*</span>protocol<span class=\"token punctuation\">.</span>Chain\n    accountManager    <span class=\"token operator\">*</span>account<span class=\"token punctuation\">.</span>Manager\n    txPool            <span class=\"token operator\">*</span>protocol<span class=\"token punctuation\">.</span>TxPool\n    numWorkers        <span class=\"token builtin\">uint64</span>\n    started           <span class=\"token builtin\">bool</span>\n    discreteMining    <span class=\"token builtin\">bool</span>\n    wg                sync<span class=\"token punctuation\">.</span>WaitGroup\n    workerWg          sync<span class=\"token punctuation\">.</span>WaitGroup\n    updateNumWorkers  <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    queryHashesPerSec <span class=\"token keyword\">chan</span> <span class=\"token builtin\">float64</span>\n    updateHashes      <span class=\"token keyword\">chan</span> <span class=\"token builtin\">uint64</span>\n    speedMonitorQuit  <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    quit              <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    newBlockCh        <span class=\"token keyword\">chan</span> <span class=\"token operator\">*</span>bc<span class=\"token punctuation\">.</span>Hash\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>可以看到还多出了几个：</p>\n<ul>\n<li><code class=\"gatsby-code-text\">sync.Mutex</code>：为CPUMiner提供了锁，方便在不同的goroutine代码中进行同步</li>\n<li><code class=\"gatsby-code-text\">started</code>：记录miner是否启动了</li>\n<li><code class=\"gatsby-code-text\">discreteMining</code>：这个在当前代码中没有赋过值，永远是<code class=\"gatsby-code-text\">false</code>，我觉得应该删除。已提<a href=\"https://github.com/Bytom/bytom/issues/961\">issue #961</a></li>\n<li><code class=\"gatsby-code-text\">wg</code>和<code class=\"gatsby-code-text\">workerWg</code>：都是跟控制goroutine流程相关的</li>\n<li><code class=\"gatsby-code-text\">speedMonitorQuit</code>：也没什么用，忽略</li>\n<li><code class=\"gatsby-code-text\">quit</code>：外界可以给这个通道发消息来通知CPUMiner退出</li>\n</ul>\n<p>再回到<code class=\"gatsby-code-text\">n.Start</code>看看<code class=\"gatsby-code-text\">cpuMiner</code>是何时启动的：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/node/node.go#L169-L180\">node/node.go#L169-L180</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span>Node<span class=\"token punctuation\">)</span> <span class=\"token function\">OnStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>miningEnable <span class=\"token punctuation\">{</span>\n        n<span class=\"token punctuation\">.</span>cpuMiner<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>由于我们传入了参数<code class=\"gatsby-code-text\">--mining</code>，所以<code class=\"gatsby-code-text\">n.miningEnable</code>是<code class=\"gatsby-code-text\">true</code>，于是<code class=\"gatsby-code-text\">n.cpuMiner.Start</code>会运行：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/mining/cpuminer/cpuminer.go#L188-L205\">mining/cpuminer/cpuminer.go#L188-L205</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>CPUMiner<span class=\"token punctuation\">)</span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    m<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> m<span class=\"token punctuation\">.</span>started <span class=\"token operator\">||</span> m<span class=\"token punctuation\">.</span>discreteMining <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n\n    m<span class=\"token punctuation\">.</span>quit <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    m<span class=\"token punctuation\">.</span>speedMonitorQuit <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    m<span class=\"token punctuation\">.</span>wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">miningWorkerController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    m<span class=\"token punctuation\">.</span>started <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">Infof</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CPU miner started\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>这段代码没太多需要说的，主要是通过判断<code class=\"gatsby-code-text\">m.started</code>保证不会重复启动，然后把真正的工作放在了<code class=\"gatsby-code-text\">m.miningWorkerController()</code>中：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/mining/cpuminer/cpuminer.go#L126-L125\">mining/cpuminer/cpuminer.go#L126-L125</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>CPUMiner<span class=\"token punctuation\">)</span> <span class=\"token function\">miningWorkerController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 1. </span>\n    <span class=\"token keyword\">var</span> runningWorkers <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    launchWorkers <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>numWorkers <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numWorkers<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n            quit <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            runningWorkers <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>runningWorkers<span class=\"token punctuation\">,</span> quit<span class=\"token punctuation\">)</span>\n\n            m<span class=\"token punctuation\">.</span>workerWg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">go</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">generateBlocks</span><span class=\"token punctuation\">(</span>quit<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    runningWorkers <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>numWorkers<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">launchWorkers</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>numWorkers<span class=\"token punctuation\">)</span>\n\nout<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 2. </span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>m<span class=\"token punctuation\">.</span>updateNumWorkers<span class=\"token punctuation\">:</span>\n            numRunning <span class=\"token operator\">:=</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>runningWorkers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> m<span class=\"token punctuation\">.</span>numWorkers <span class=\"token operator\">==</span> numRunning <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">continue</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> m<span class=\"token punctuation\">.</span>numWorkers <span class=\"token operator\">></span> numRunning <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">launchWorkers</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>numWorkers <span class=\"token operator\">-</span> numRunning<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">continue</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> numRunning <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> m<span class=\"token punctuation\">.</span>numWorkers<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>runningWorkers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                runningWorkers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n                runningWorkers <span class=\"token operator\">=</span> runningWorkers<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>i<span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 3.</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>m<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> quit <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> runningWorkers <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>quit<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span> out\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    m<span class=\"token punctuation\">.</span>workerWg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>speedMonitorQuit<span class=\"token punctuation\">)</span>\n    m<span class=\"token punctuation\">.</span>wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>这个方法看起来代码挺多的，但是实际上做的事情还是比较好理清的，主要是做了三件事：</p>\n<ol>\n<li>第1处代码是按指定的worker数量启动挖矿例程</li>\n<li>第2处是监听应该保持的worker数量并增减</li>\n<li>第3处在被知关闭的时候安全关闭</li>\n</ol>\n<p>代码比较清楚，应该不需要多讲。</p>\n<p>可以看第1处代码中，真正挖矿的工作是放在<code class=\"gatsby-code-text\">generateBlocks</code>里的：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/mining/cpuminer/cpuminer.go#L84-L119\">mining/cpuminer/cpuminer.go#L84-L119</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>CPUMiner<span class=\"token punctuation\">)</span> <span class=\"token function\">generateBlocks</span><span class=\"token punctuation\">(</span>quit <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ticker <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">NewTicker</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> hashUpdateSecs<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> ticker<span class=\"token punctuation\">.</span><span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nout<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>quit<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span> out\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 1.</span>\n        block<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> mining<span class=\"token punctuation\">.</span><span class=\"token function\">NewBlockTemplate</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>txPool<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>accountManager<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// ...</span>\n\n        <span class=\"token comment\">// 2.</span>\n        <span class=\"token keyword\">if</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">solveBlock</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> ticker<span class=\"token punctuation\">,</span> quit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 3.</span>\n            <span class=\"token keyword\">if</span> isOrphan<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">.</span><span class=\"token function\">ProcessBlock</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// ...</span>\n                <span class=\"token comment\">// 4.</span>\n                blockHash <span class=\"token operator\">:=</span> block<span class=\"token punctuation\">.</span><span class=\"token function\">Hash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                m<span class=\"token punctuation\">.</span>newBlockCh <span class=\"token operator\">&lt;-</span> <span class=\"token operator\">&amp;</span>blockHash\n                <span class=\"token comment\">// ...</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    m<span class=\"token punctuation\">.</span>workerWg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>方法里省略了一些不太重要的代码，我们可以从标注的几处看一下在做什么：</p>\n<ol>\n<li>第1处通过<code class=\"gatsby-code-text\">mining.NewBlockTemplate</code>根据模板生成了一个block</li>\n<li>第2处是以暴力方式（从<code class=\"gatsby-code-text\">0</code>开始挨个计算）来争夺对该区块的记帐权</li>\n<li>第3处是通过<code class=\"gatsby-code-text\">chain.ProcessBlock(block)</code>尝试把它加到本机持有的区块链上</li>\n<li>第4处是向<code class=\"gatsby-code-text\">newBlockCh</code>通道发出消息，通知外界自己挖到了新的块</li>\n</ol>\n<h3 id=\"miningnewblocktemplate\"><a href=\"#miningnewblocktemplate\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mining.NewBlockTemplate</h3>\n<p>我们先看一下第1处中的<code class=\"gatsby-code-text\">mining.NewBlockTemplate</code>：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/mining/mining.go#L67-L154\">mining/mining.go#L67-L154</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">NewBlockTemplate</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>protocol<span class=\"token punctuation\">.</span>Chain<span class=\"token punctuation\">,</span> txPool <span class=\"token operator\">*</span>protocol<span class=\"token punctuation\">.</span>TxPool<span class=\"token punctuation\">,</span> accountManager <span class=\"token operator\">*</span>account<span class=\"token punctuation\">.</span>Manager<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>types<span class=\"token punctuation\">.</span>Block<span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">,</span> err\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>这个方法很长，但是内容都被我忽略了，原因是它的内容过于细节，并且已经触及到了比原的核心，所以现在大概了解一下就可以了。</p>\n<p>比原在一个Block区块里，有一些基本信息，比如在其头部有前一块的hash值、挖矿难度值、时间戳等等，主体部有各种交易记录，以及多次层的hash摘要。在这个方法中，主要的逻辑就是去找到这些信息然后把它们包装成一个Block对象，然后交由后面处理。我觉得在我们还没有深刻理解比原的区块链结构和规则的情况下，看这些太细节的东西没有太大用处，所以先忽略，等以后合适的时候再回过头来看就简单了。</p>\n<h3 id=\"msolveblock\"><a href=\"#msolveblock\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>m.solveBlock</h3>\n<p>我们继续向下，当由<code class=\"gatsby-code-text\">NewBlockTemplate</code>生成好了一个Block对象后，它会交给<code class=\"gatsby-code-text\">solveBlock</code>方法处理：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/mining/cpuminer/cpuminer.go#L50-L75\">mining/cpuminer/cpuminer.go#L50-L75</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>CPUMiner<span class=\"token punctuation\">)</span> <span class=\"token function\">solveBlock</span><span class=\"token punctuation\">(</span>block <span class=\"token operator\">*</span>types<span class=\"token punctuation\">.</span>Block<span class=\"token punctuation\">,</span> ticker <span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Ticker<span class=\"token punctuation\">,</span> quit <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 1. </span>\n    header <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>block<span class=\"token punctuation\">.</span>BlockHeader\n    seed<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">.</span><span class=\"token function\">CalcNextSeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>header<span class=\"token punctuation\">.</span>PreviousBlockHash<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token comment\">// 2.</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> maxNonce<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 3. </span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>quit<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ticker<span class=\"token punctuation\">.</span>C<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> m<span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">.</span><span class=\"token function\">BestBlockHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> header<span class=\"token punctuation\">.</span>Height <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 4.</span>\n        header<span class=\"token punctuation\">.</span>Nonce <span class=\"token operator\">=</span> i\n        headerHash <span class=\"token operator\">:=</span> header<span class=\"token punctuation\">.</span><span class=\"token function\">Hash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\">// 5.</span>\n        <span class=\"token keyword\">if</span> difficulty<span class=\"token punctuation\">.</span><span class=\"token function\">CheckProofOfWork</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>headerHash<span class=\"token punctuation\">,</span> seed<span class=\"token punctuation\">,</span> header<span class=\"token punctuation\">.</span>Bits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>这个方法就是挖矿中我们最关心的部分了：争夺记帐权。</p>\n<p>我把代码分成了4块，依次简单讲解：</p>\n<ol>\n<li>第1处是从本地区块链中找到新生成的区块指定的父区块，并由它计算出来<code class=\"gatsby-code-text\">seed</code>，它是如何计算出来的我们暂时不关心（比较复杂），此时只要知道它是用来检查工作量的就可以了</li>\n<li>第2处是使用暴力方式来计算目标值，用于争夺记帐权。为什么说是暴力方式？因为挖矿的算法保证了想解开难题，没有比从0开始一个个计算更快的办法，所以这里从0开始依次尝试，直到<code class=\"gatsby-code-text\">maxNonce</code>结束。<code class=\"gatsby-code-text\">maxNonce</code>是一个非常大的数<code class=\"gatsby-code-text\">^uint64(0)</code>（即<code class=\"gatsby-code-text\">2^64 - 1</code>），基本上是不可能在一个区块时间内遍历完的。</li>\n<li>第3处是在每次循环中进行计算之前，都看一看是否需要退出。在两种情况下应该退出，一是<code class=\"gatsby-code-text\">quit</code>通道里有新消息，被人提醒退出（可能是时间到了）；另一种是本地的区块链中已经收到了新的块，且高度比较自己高，说明已经有别人抢到了。</li>\n<li>第4处是把当前循环的数字当作<code class=\"gatsby-code-text\">Nonce</code>，计算出Hash值</li>\n<li>第5处是调用<code class=\"gatsby-code-text\">difficulty.CheckProofOfWork</code>来检查当前算出来的hash值是否满足了当前难度。如果满足就说明自己拥有了记帐权，这个块是有效的；否则就继续计算</li>\n</ol>\n<p>然后我们再看一下第5处的<code class=\"gatsby-code-text\">difficulty.CheckProofOfWork</code>:</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/consensus/difficulty/difficulty.go#L120-L123\">consensus/difficulty/difficulty.go#L120-L123</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">CheckProofOfWork</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> seed <span class=\"token operator\">*</span>bc<span class=\"token punctuation\">.</span>Hash<span class=\"token punctuation\">,</span> bits <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n    compareHash <span class=\"token operator\">:=</span> tensority<span class=\"token punctuation\">.</span>AIHash<span class=\"token punctuation\">.</span><span class=\"token function\">Hash</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> seed<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">HashToBig</span><span class=\"token punctuation\">(</span>compareHash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Cmp</span><span class=\"token punctuation\">(</span><span class=\"token function\">CompactToBig</span><span class=\"token punctuation\">(</span>bits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>在这个方法里，可以看到出现了一个<code class=\"gatsby-code-text\">tensority.AIHash</code>，这是比原独有的人工智能友好的工作量算法，相关论文的下载地址：<a href=\"https://github.com/Bytom/bytom/wiki/download/tensority-v1.2.pdf\">https://github.com/Bytom/bytom/wiki/download/tensority-v1.2.pdf</a>，有兴趣的同学可以去看看。由于这个算法的难度肯定超出了本文的预期，所以就不研究它了。在以后，如果有机会有条件的话，也许我会试着理解一下（不要期待~）</p>\n<p>从这个方法里可以看出，它是调用了<code class=\"gatsby-code-text\">tensority.AIHash</code>中的相关方法进判断当前计算出来的hash是否满足难度要求。</p>\n<p>在本文的开始，我们说过希望能找到一种方法修改比原的代码，让我们在<code class=\"gatsby-code-text\">solonet</code>模式下，可以正常挖矿，得到BTM用于测试。看到这个方法的时候，我觉得已经找到了，我们只需要修改一下让它永远返回<code class=\"gatsby-code-text\">true</code>即可：</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">CheckProofOfWork</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> seed <span class=\"token operator\">*</span>bc<span class=\"token punctuation\">.</span>Hash<span class=\"token punctuation\">,</span> bits <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n    compareHash <span class=\"token operator\">:=</span> tensority<span class=\"token punctuation\">.</span>AIHash<span class=\"token punctuation\">.</span><span class=\"token function\">Hash</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> seed<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">HashToBig</span><span class=\"token punctuation\">(</span>compareHash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Cmp</span><span class=\"token punctuation\">(</span><span class=\"token function\">CompactToBig</span><span class=\"token punctuation\">(</span>bits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>这里也许会让人觉得有点奇怪，为什么要在最后的地方加上<code class=\"gatsby-code-text\">|| true</code>，而不是在前面直接返回<code class=\"gatsby-code-text\">true</code>呢？这是因为，如果直接返回<code class=\"gatsby-code-text\">true</code>，可能使得程序中关于时间戳检查的地方出现问题，出现如下的错误：</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">time=&quot;2018-05-17T12:10:14+08:00&quot; level=error msg=&quot;Miner fail on ProcessBlock block, timestamp is not in the valid range: invalid block&quot; height=32</code></pre>\n      </div>\n<p>原因还未深究，可能是因为原本的代码是需要消耗一些时间的，正好使得检查通过。如果直接返回<code class=\"gatsby-code-text\">true</code>就太快了，反而使检查通过不了。不过我感觉这里是有一点问题的，留待以后再研究。</p>\n<p>这样修改完以后，再重新编译并启动比原节点，每个块都能挖到了，差不多一秒一个块（一下子变成大富豪了：）</p>\n<h3 id=\"mchainprocessblock\"><a href=\"#mchainprocessblock\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>m.chain.ProcessBlock</h3>\n<p>我们此时该回到<code class=\"gatsby-code-text\">generateBlocks</code>方法中的第3处，即：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/mining/cpuminer/cpuminer.go#L84-L119\">mining/cpuminer/cpuminer.go#L84-L119</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>CPUMiner<span class=\"token punctuation\">)</span> <span class=\"token function\">generateBlocks</span><span class=\"token punctuation\">(</span>quit <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//...</span>\n        <span class=\"token keyword\">if</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">solveBlock</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> ticker<span class=\"token punctuation\">,</span> quit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 3.</span>\n            <span class=\"token keyword\">if</span> isOrphan<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">.</span><span class=\"token function\">ProcessBlock</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// ...</span>\n                <span class=\"token comment\">// 4.</span>\n                blockHash <span class=\"token operator\">:=</span> block<span class=\"token punctuation\">.</span><span class=\"token function\">Hash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                m<span class=\"token punctuation\">.</span>newBlockCh <span class=\"token operator\">&lt;-</span> <span class=\"token operator\">&amp;</span>blockHash\n                <span class=\"token comment\">// ...</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    m<span class=\"token punctuation\">.</span>workerWg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><code class=\"gatsby-code-text\">m.chain.ProcessBlock</code>把刚才成功拿到记帐权的块向本地区块链上添加：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/protocol/block.go#L191-L196\">protocol/block.go#L191-L196</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Chain<span class=\"token punctuation\">)</span> <span class=\"token function\">ProcessBlock</span><span class=\"token punctuation\">(</span>block <span class=\"token operator\">*</span>types<span class=\"token punctuation\">.</span>Block<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    reply <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> processBlockResponse<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span>processBlockCh <span class=\"token operator\">&lt;-</span> <span class=\"token operator\">&amp;</span>processBlockMsg<span class=\"token punctuation\">{</span>block<span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">,</span> reply<span class=\"token punctuation\">:</span> reply<span class=\"token punctuation\">}</span>\n    response <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>reply\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>isOrphan<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>err\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>可以看到这里实际上是把这个工作甩出去了，因为它把要处理的块放进了<code class=\"gatsby-code-text\">Chain.processBlockCh</code>这个通道里，同时传过去的还有一个用于对方回复的通道<code class=\"gatsby-code-text\">reply</code>。然后监听<code class=\"gatsby-code-text\">reply</code>等消息就可以了。</p>\n<p>那么谁将会处理<code class=\"gatsby-code-text\">c.processBlockCh</code>里的内容呢？当然是由<code class=\"gatsby-code-text\">Chain</code>，只不过这里就属于比原核心了，我们留等以后再详细研究，今天就先跳过。</p>\n<p>如果处理完没有出错，就进入到了第4块，把这个block的hash放在<code class=\"gatsby-code-text\">newBlockCh</code>通道里。这个<code class=\"gatsby-code-text\">newBlockCh</code>是由外面传入的，很多地方都会用到。当它里面有新的数据时，就说明本机挖到了新块（并且已经添加到了本机的区块链上），其它的地方就可以使用它进行别的操作（比如广播出去）</p>\n<p>那么到这里，我们今天的问题就算解决了，留下了很多坑，以后专门填。</p>\n<hr>\n<p>如果你觉得这些文章对你非常有用，控制不住想打赏作者，可以有以下选择：</p>\n<ol>\n<li>BTM: <code class=\"gatsby-code-text\">0x6bcCfb7265d4aB0C1a71F7d19b9E581cae73D777</code></li>\n<li>BTC: <code class=\"gatsby-code-text\">1Af2Q23Y1kqgtgbryzjS7RxrnEmyvYuX4b</code></li>\n<li>ETH: <code class=\"gatsby-code-text\">0x6bcCfb7265d4aB0C1a71F7d19b9E581cae73D777</code></li>\n</ol>\n<p>多少请随意，心意最重要，我们一起努力吧！</p>","frontmatter":{"title":"挖矿流程","next":null,"prev":null},"fields":{"path":null,"slug":"docs/bytomanalysis-mining-process.html"}}},"pathContext":{"slug":"docs/bytomanalysis-mining-process.html"}}