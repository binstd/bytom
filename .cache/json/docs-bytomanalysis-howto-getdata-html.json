{"data":{"markdownRemark":{"html":"<p>在前一篇中，我们已经知道如何连上一个比原节点的p2p端口，并与对方完成身份验证。此时，双方结点已经建立起来了信任，并且连接也不会断开，下一步，两者就可以继续交换数据了。</p>\n<p>那么，我首先想到的就是，如何才能让对方把它已有的区块数据全都发给我呢？</p>\n<p>这其实可以分为三个问题：</p>\n<ol>\n<li>我需要发给它什么样的数据？</li>\n<li>它在内部由是如何应答的呢？</li>\n<li>我拿到数据之后，应该怎么处理？</li>\n</ol>\n<p>由于这一块的逻辑还是比较复杂的，所以在本篇我们先回答第一个问题：</p>\n<h2 id=\"我们要发送什么样的数据请求，才能让比原节点把它持有的区块数据发给我？\"><a href=\"#%E6%88%91%E4%BB%AC%E8%A6%81%E5%8F%91%E9%80%81%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82%EF%BC%8C%E6%89%8D%E8%83%BD%E8%AE%A9%E6%AF%94%E5%8E%9F%E8%8A%82%E7%82%B9%E6%8A%8A%E5%AE%83%E6%8C%81%E6%9C%89%E7%9A%84%E5%8C%BA%E5%9D%97%E6%95%B0%E6%8D%AE%E5%8F%91%E7%BB%99%E6%88%91%EF%BC%9F\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>我们要发送什么样的数据请求，才能让比原节点把它持有的区块数据发给我？</h2>\n<h3 id=\"找到发送请求的代码\"><a href=\"#%E6%89%BE%E5%88%B0%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E7%9A%84%E4%BB%A3%E7%A0%81\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>找到发送请求的代码</h3>\n<p>首先我们先要在代码中定位到，比原到底是在什么时候来向对方节点发送请求的。</p>\n<p>在前一篇讲的是如何建立连接并验证身份，那么发出数据请求的操作，一定在上次的代码之后。按照这个思路，我们在<code class=\"gatsby-code-text\">SyncManager</code>类中<code class=\"gatsby-code-text\">Switch</code>启动之后，找到了一个叫<code class=\"gatsby-code-text\">BlockKeeper</code>的类，相关的操作是在它里面完成的。</p>\n<p>下面是老规矩，还是从启动开始，但是会更简化一些：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/cmd/bytomd/main.go#L54\">cmd/bytomd/main.go#L54</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cmd <span class=\"token operator\">:=</span> cli<span class=\"token punctuation\">.</span><span class=\"token function\">PrepareBaseCmd</span><span class=\"token punctuation\">(</span>commands<span class=\"token punctuation\">.</span>RootCmd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"TM\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">ExpandEnv</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">DefaultDataDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/cmd/bytomd/commands/run_node.go#L41\">cmd/bytomd/commands/run_node.go#L41</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">runNode</span><span class=\"token punctuation\">(</span>cmd <span class=\"token operator\">*</span>cobra<span class=\"token punctuation\">.</span>Command<span class=\"token punctuation\">,</span> args <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    n <span class=\"token operator\">:=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">NewNode</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/node/node.go#L169\">node/node.go#L169</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span>Node<span class=\"token punctuation\">)</span> <span class=\"token function\">OnStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    n<span class=\"token punctuation\">.</span>syncManager<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/netsync/handle.go#L141\">netsync/handle.go#L141</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>sm <span class=\"token operator\">*</span>SyncManager<span class=\"token punctuation\">)</span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">go</span> sm<span class=\"token punctuation\">.</span><span class=\"token function\">netStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">go</span> sm<span class=\"token punctuation\">.</span><span class=\"token function\">syncer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>注意<code class=\"gatsby-code-text\">sm.netStart()</code>，我们在一篇中建立连接并验证身份的操作，就是在它里面完成的。而这次的这个问题，是在下面的<code class=\"gatsby-code-text\">sm.syncer()</code>中完成的。</p>\n<p>另外注意，由于这两个函数调用都使用了goroutine，所以它们是同时进行的。</p>\n<p><code class=\"gatsby-code-text\">sm.syncer()</code>的代码如下：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/netsync/sync.go#L46\">netsync/sync.go#L46</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>sm <span class=\"token operator\">*</span>SyncManager<span class=\"token punctuation\">)</span> <span class=\"token function\">syncer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    sm<span class=\"token punctuation\">.</span>fetcher<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> sm<span class=\"token punctuation\">.</span>fetcher<span class=\"token punctuation\">.</span><span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>sm<span class=\"token punctuation\">.</span>newPeerCh<span class=\"token punctuation\">:</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"New peer connected.\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// Make sure we have peers to select from, then sync</span>\n            <span class=\"token keyword\">if</span> sm<span class=\"token punctuation\">.</span>sw<span class=\"token punctuation\">.</span><span class=\"token function\">Peers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> minDesiredPeerCount <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">go</span> sm<span class=\"token punctuation\">.</span><span class=\"token function\">synchronise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// ..</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>这里混入了一个叫<code class=\"gatsby-code-text\">fetcher</code>的奇怪的东西，名字看起来好像是专门去抓取数据的，我们要找的是它吗？</p>\n<p>可惜不是，<code class=\"gatsby-code-text\">fetcher</code>的作用是从多个peer那里拿到了区块数据之后，对数据进行整理，把有用的放到本地链上。我们在以后会研究它，所以这里不展开讨论。</p>\n<p>接着是一个<code class=\"gatsby-code-text\">for</code>循环，当发现通道<code class=\"gatsby-code-text\">newPeerCh</code>有了新数据（也就是有了新的节点连接上了），会判断一下当前自己连着的节点是否够多（大于等于<code class=\"gatsby-code-text\">minDesiredPeerCount</code>，值为<code class=\"gatsby-code-text\">5</code>），够多的话，就会进入<code class=\"gatsby-code-text\">sm.synchronise()</code>，进行数据同步。</p>\n<p>这里为什么要多等几个节点，而不是一连上就马上同步呢？我想这是希望有更多选择的机会，找到一个数据够多的节点。</p>\n<p><code class=\"gatsby-code-text\">sm.synchronise()</code>还是属于<code class=\"gatsby-code-text\">SyncManager</code>的方法。在真正调用到<code class=\"gatsby-code-text\">BlockKeeper</code>的方法之前，它还做了一些比如清理已经断开的peer，找到最适合同步数据的peer等。其中“清理peer”的工作涉及到不同的对象持有的peer集合间的同步，略有些麻烦，但对当前问题帮助不大，所以我打算把它们放在以后的某个问题中回答（比如“当一个节点断开了，比原会有什么样的处理”），这里就先省略。</p>\n<p><code class=\"gatsby-code-text\">sm.synchronise()</code>代码如下：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/netsync/sync.go#L77\">netsync/sync.go#L77</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>sm <span class=\"token operator\">*</span>SyncManager<span class=\"token punctuation\">)</span> <span class=\"token function\">synchronise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bk peer num:\"</span><span class=\"token punctuation\">,</span> sm<span class=\"token punctuation\">.</span>blockKeeper<span class=\"token punctuation\">.</span>peers<span class=\"token punctuation\">.</span><span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" sw peer num:\"</span><span class=\"token punctuation\">,</span> sm<span class=\"token punctuation\">.</span>sw<span class=\"token punctuation\">.</span><span class=\"token function\">Peers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> sm<span class=\"token punctuation\">.</span>sw<span class=\"token punctuation\">.</span><span class=\"token function\">Peers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">List</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n    peer<span class=\"token punctuation\">,</span> bestHeight <span class=\"token operator\">:=</span> sm<span class=\"token punctuation\">.</span>peers<span class=\"token punctuation\">.</span><span class=\"token function\">BestPeer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">if</span> bestHeight <span class=\"token operator\">></span> sm<span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">.</span><span class=\"token function\">BestBlockHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n        sm<span class=\"token punctuation\">.</span>blockKeeper<span class=\"token punctuation\">.</span><span class=\"token function\">BlockRequestWorker</span><span class=\"token punctuation\">(</span>peer<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">,</span> bestHeight<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>可以看到，首先是从众多的peers中，找到最合适的那个。什么叫Best呢？看一下<code class=\"gatsby-code-text\">BestPeer()</code>的定义：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/netsync/peer.go#L266\">netsync/peer.go#L266</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>ps <span class=\"token operator\">*</span>peerSet<span class=\"token punctuation\">)</span> <span class=\"token function\">BestPeer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p2p<span class=\"token punctuation\">.</span>Peer<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> p <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> ps<span class=\"token punctuation\">.</span>peers <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> bestPeer <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">||</span> p<span class=\"token punctuation\">.</span>height <span class=\"token operator\">></span> bestHeight <span class=\"token punctuation\">{</span>\n            bestPeer<span class=\"token punctuation\">,</span> bestHeight <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>swPeer<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>height\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> bestPeer<span class=\"token punctuation\">,</span> bestHeight\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>其实就是持有区块链数据最长的那个。</p>\n<p>找到了BestPeer之后，就调用<code class=\"gatsby-code-text\">sm.blockKeeper.BlockRequestWorker(peer.Key, bestHeight)</code>方法，从这里，正式进入<code class=\"gatsby-code-text\">BlockKeeper</code> －－ 也就是本文的主角 －－ 的世界。</p>\n<h3 id=\"blockkeeper\"><a href=\"#blockkeeper\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BlockKeeper</h3>\n<p><code class=\"gatsby-code-text\">blockKeeper.BlockRequestWorker</code>的逻辑比较复杂，它包含了：</p>\n<ol>\n<li>根据自己持有的区块数据来计算需要同步的数据</li>\n<li>向前面找到的最佳节点发送数据请求</li>\n<li>拿到对方发过来的区块数据</li>\n<li>对数据进行处理</li>\n<li>广播新状态</li>\n<li>处理各种出错情况，等等</li>\n</ol>\n<p>由于本文中只关注“发送请求”，所以一些与之关系不大的逻辑我会忽略掉，留待以后再讲。</p>\n<p>在“发送请求”这里，实际也包含了两种情形，一种简单的，一种复杂的：</p>\n<ol>\n<li>简单的：假设不存在分叉，则直接检查本地高度最高的区块，然后请求下一个区块</li>\n<li>复杂的：考虑分叉的情况，则当前本地的区块可能就存在分叉，那么到底应该请求哪个区块，就需要慎重考虑</li>\n</ol>\n<p>由于第2种情况对于本文来说过于复杂（因为需要深刻理解比原链中分叉的处理逻辑），所以在本文中将把问题简化，只考虑第1种。而分叉的处理，将放在以后讲解。</p>\n<p>下面是把<code class=\"gatsby-code-text\">blockKeeper.BlockRequestWorker</code>中的代码简化成了只包含第1种情况：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/netsync/block_keeper.go#L72\">netsync/block_keeper.go#L72</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>bk <span class=\"token operator\">*</span>blockKeeper<span class=\"token punctuation\">)</span> <span class=\"token function\">BlockRequestWorker</span><span class=\"token punctuation\">(</span>peerID <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> maxPeerHeight <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    num <span class=\"token operator\">:=</span> bk<span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">.</span><span class=\"token function\">BestBlockHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    reqNum <span class=\"token operator\">:=</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    reqNum <span class=\"token operator\">=</span> num\n    <span class=\"token comment\">// ...</span>\n    bkPeer<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> bk<span class=\"token punctuation\">.</span>peers<span class=\"token punctuation\">.</span><span class=\"token function\">Peer</span><span class=\"token punctuation\">(</span>peerID<span class=\"token punctuation\">)</span>\n    swPeer <span class=\"token operator\">:=</span> bkPeer<span class=\"token punctuation\">.</span><span class=\"token function\">getPeer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n    block<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> bk<span class=\"token punctuation\">.</span><span class=\"token function\">BlockRequest</span><span class=\"token punctuation\">(</span>peerID<span class=\"token punctuation\">,</span> reqNum<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>在这种情况下，我们可以认为<code class=\"gatsby-code-text\">bk.chain.BestBlockHeight()</code>中的<code class=\"gatsby-code-text\">Best</code>，指的是本地持有的不带分叉的区块链高度最高的那个。（需要提醒的是，如果存在分叉情况，则<code class=\"gatsby-code-text\">Best</code>不一定是高度最高的那个）</p>\n<p>那么我们就可以直接向最佳peer请求下一个高度的区块，它是通过<code class=\"gatsby-code-text\">bk.BlockRequest(peerID, reqNum)</code>实现的：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/netsync/block_keeper.go#L152\">netsync/block_keeper.go#L152</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>bk <span class=\"token operator\">*</span>blockKeeper<span class=\"token punctuation\">)</span> <span class=\"token function\">BlockRequest</span><span class=\"token punctuation\">(</span>peerID <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> height <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>types<span class=\"token punctuation\">.</span>Block<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> block <span class=\"token operator\">*</span>types<span class=\"token punctuation\">.</span>Block\n\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> bk<span class=\"token punctuation\">.</span><span class=\"token function\">blockRequest</span><span class=\"token punctuation\">(</span>peerID<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> errReqBlock\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> pendingResponse <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>bk<span class=\"token punctuation\">.</span>pendingProcessCh<span class=\"token punctuation\">:</span>\n            block <span class=\"token operator\">=</span> pendingResponse<span class=\"token punctuation\">.</span>block\n            <span class=\"token comment\">// ...</span>\n            <span class=\"token keyword\">return</span> block<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n        <span class=\"token comment\">// ...</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>在上面简化后的代码中，主要分成了两个部分。一个是发送请求<code class=\"gatsby-code-text\">bk.blockRequest(peerID, height)</code>，这是本文的重点；它下面的<code class=\"gatsby-code-text\">for-select</code>部分，已经是在等待并处理对方节点的返回数据了，这部分我们今天先略过不讲。</p>\n<p><code class=\"gatsby-code-text\">bk.blockRequest(peerID, height)</code>这个方法，从逻辑上又可以分成两部分：</p>\n<ol>\n<li>构造出请求的信息</li>\n<li>把信息发送给对方节点</li>\n</ol>\n<h3 id=\"构造出请求的信息\"><a href=\"#%E6%9E%84%E9%80%A0%E5%87%BA%E8%AF%B7%E6%B1%82%E7%9A%84%E4%BF%A1%E6%81%AF\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>构造出请求的信息</h3>\n<p><code class=\"gatsby-code-text\">bk.blockRequest(peerID, height)</code>经过一连串的方法调用之后，使用<code class=\"gatsby-code-text\">height</code>构造出了一个<code class=\"gatsby-code-text\">BlockRequestMessage</code>对象，代码如下：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/netsync/block_keeper.go#L148\">netsync/block_keeper.go#L148</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>bk <span class=\"token operator\">*</span>blockKeeper<span class=\"token punctuation\">)</span> <span class=\"token function\">blockRequest</span><span class=\"token punctuation\">(</span>peerID <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> height <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> bk<span class=\"token punctuation\">.</span>peers<span class=\"token punctuation\">.</span><span class=\"token function\">requestBlockByHeight</span><span class=\"token punctuation\">(</span>peerID<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/netsync/peer.go#L332\">netsync/peer.go#L332</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>ps <span class=\"token operator\">*</span>peerSet<span class=\"token punctuation\">)</span> <span class=\"token function\">requestBlockByHeight</span><span class=\"token punctuation\">(</span>peerID <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> height <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    peer<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> ps<span class=\"token punctuation\">.</span><span class=\"token function\">Peer</span><span class=\"token punctuation\">(</span>peerID<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">return</span> peer<span class=\"token punctuation\">.</span><span class=\"token function\">requestBlockByHeight</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/netsync/peer.go#L73\">netsync/peer.go#L73</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>peer<span class=\"token punctuation\">)</span> <span class=\"token function\">requestBlockByHeight</span><span class=\"token punctuation\">(</span>height <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    msg <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>BlockRequestMessage<span class=\"token punctuation\">{</span>Height<span class=\"token punctuation\">:</span> height<span class=\"token punctuation\">}</span>\n    p<span class=\"token punctuation\">.</span>swPeer<span class=\"token punctuation\">.</span><span class=\"token function\">TrySend</span><span class=\"token punctuation\">(</span>BlockchainChannel<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span> BlockchainMessage <span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>msg<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>到这里，终于构造出了所需要的<code class=\"gatsby-code-text\">BlockRequestMessage</code>，其实主要就是把<code class=\"gatsby-code-text\">height</code>告诉peer。</p>\n<p>然后，通过<code class=\"gatsby-code-text\">Peer</code>的<code class=\"gatsby-code-text\">TrySend()</code>把该信息发出去。</p>\n<h3 id=\"发送请求\"><a href=\"#%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>发送请求</h3>\n<p>在<code class=\"gatsby-code-text\">TrySend</code>中，主要是通过<code class=\"gatsby-code-text\">github.com/tendermint/go-wire</code>库将其序列化，再发送给对方。看起来应该是很简单的操作吧，先预个警，还是挺绕的。</p>\n<p>当我们进入<code class=\"gatsby-code-text\">TrySend()</code>后：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/peer.go#L242\">p2p/peer.go#L242</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>Peer<span class=\"token punctuation\">)</span> <span class=\"token function\">TrySend</span><span class=\"token punctuation\">(</span>chID <span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> msg <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">IsRunning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span>mconn<span class=\"token punctuation\">.</span><span class=\"token function\">TrySend</span><span class=\"token punctuation\">(</span>chID<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>发现它把锅丢给了<code class=\"gatsby-code-text\">p.mconn.TrySend</code>方法，那么<code class=\"gatsby-code-text\">mconn</code>是什么？<code class=\"gatsby-code-text\">chID</code>又是什么？</p>\n<p><code class=\"gatsby-code-text\">mconn</code>是<code class=\"gatsby-code-text\">MConnection</code>的实例，它是从哪儿来的？它应该在之前的某个地方初始化了，否则我们没法直接调用它。所以我们先来找到它初始化的地方。</p>\n<p>经过一番寻找，发现原来是在前一篇之后，即比原节点与另一个节点完成了身份验证之后，具体的位置在<code class=\"gatsby-code-text\">Switch</code>类启动的地方。</p>\n<p>我们这次直接从<code class=\"gatsby-code-text\">Swtich</code>的<code class=\"gatsby-code-text\">OnStart</code>作为起点：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/switch.go#L186\">p2p/switch.go#L186</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>sw <span class=\"token operator\">*</span>Switch<span class=\"token punctuation\">)</span> <span class=\"token function\">OnStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token comment\">// Start listeners</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> listener <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> sw<span class=\"token punctuation\">.</span>listeners <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">go</span> sw<span class=\"token punctuation\">.</span><span class=\"token function\">listenerRoutine</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/switch.go#L498\">p2p/switch.go#L498</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>sw <span class=\"token operator\">*</span>Switch<span class=\"token punctuation\">)</span> <span class=\"token function\">listenerRoutine</span><span class=\"token punctuation\">(</span>l Listener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        inConn<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">Connections</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// ...</span>\n        err <span class=\"token operator\">:=</span> sw<span class=\"token punctuation\">.</span><span class=\"token function\">addPeerWithConnectionAndConfig</span><span class=\"token punctuation\">(</span>inConn<span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">.</span>peerConfig<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/switch.go#L645\">p2p/switch.go#L645</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>sw <span class=\"token operator\">*</span>Switch<span class=\"token punctuation\">)</span> <span class=\"token function\">addPeerWithConnectionAndConfig</span><span class=\"token punctuation\">(</span>conn net<span class=\"token punctuation\">.</span>Conn<span class=\"token punctuation\">,</span> config <span class=\"token operator\">*</span>PeerConfig<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    peer<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">newInboundPeerWithConfig</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">.</span>reactorsByCh<span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">.</span>chDescs<span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">.</span>StopPeerForError<span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">.</span>nodePrivKey<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/peer.go#L87\">p2p/peer.go#L87</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">newInboundPeerWithConfig</span><span class=\"token punctuation\">(</span>conn net<span class=\"token punctuation\">.</span>Conn<span class=\"token punctuation\">,</span> reactorsByCh <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">]</span>Reactor<span class=\"token punctuation\">,</span> chDescs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>ChannelDescriptor<span class=\"token punctuation\">,</span> onPeerError <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Peer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ourNodePrivKey crypto<span class=\"token punctuation\">.</span>PrivKeyEd25519<span class=\"token punctuation\">,</span> config <span class=\"token operator\">*</span>PeerConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Peer<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">newPeerFromConnAndConfig</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> reactorsByCh<span class=\"token punctuation\">,</span> chDescs<span class=\"token punctuation\">,</span> onPeerError<span class=\"token punctuation\">,</span> ourNodePrivKey<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/peer.go#L91\">p2p/peer.go#L91</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">newPeerFromConnAndConfig</span><span class=\"token punctuation\">(</span>rawConn net<span class=\"token punctuation\">.</span>Conn<span class=\"token punctuation\">,</span> outbound <span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> reactorsByCh <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">]</span>Reactor<span class=\"token punctuation\">,</span> chDescs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>ChannelDescriptor<span class=\"token punctuation\">,</span> onPeerError <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Peer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ourNodePrivKey crypto<span class=\"token punctuation\">.</span>PrivKeyEd25519<span class=\"token punctuation\">,</span> config <span class=\"token operator\">*</span>PeerConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Peer<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    conn <span class=\"token operator\">:=</span> rawConn\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">if</span> config<span class=\"token punctuation\">.</span>AuthEnc <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n        conn<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> <span class=\"token function\">MakeSecretConnection</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> ourNodePrivKey<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Key and NodeInfo are set after Handshake</span>\n    p <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Peer<span class=\"token punctuation\">{</span>\n        outbound<span class=\"token punctuation\">:</span> outbound<span class=\"token punctuation\">,</span>\n        conn<span class=\"token punctuation\">:</span>     conn<span class=\"token punctuation\">,</span>\n        config<span class=\"token punctuation\">:</span>   config<span class=\"token punctuation\">,</span>\n        Data<span class=\"token punctuation\">:</span>     cmn<span class=\"token punctuation\">.</span><span class=\"token function\">NewCMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    p<span class=\"token punctuation\">.</span>mconn <span class=\"token operator\">=</span> <span class=\"token function\">createMConnection</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> reactorsByCh<span class=\"token punctuation\">,</span> chDescs<span class=\"token punctuation\">,</span> onPeerError<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>MConfig<span class=\"token punctuation\">)</span>\n\n    p<span class=\"token punctuation\">.</span>BaseService <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>cmn<span class=\"token punctuation\">.</span><span class=\"token function\">NewBaseService</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Peer\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>终于找到了。上面方法中的<code class=\"gatsby-code-text\">MakeSecretConnection</code>就是与对方节点交换公钥并进行身份验证的地方，下面的<code class=\"gatsby-code-text\">p.mconn = createMConnection(...)</code>就是创建<code class=\"gatsby-code-text\">mconn</code>的地方。</p>\n<p>继续进去：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/peer.go#L292\">p2p/peer.go#L292</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">createMConnection</span><span class=\"token punctuation\">(</span>conn net<span class=\"token punctuation\">.</span>Conn<span class=\"token punctuation\">,</span> p <span class=\"token operator\">*</span>Peer<span class=\"token punctuation\">,</span> reactorsByCh <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">]</span>Reactor<span class=\"token punctuation\">,</span> chDescs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>ChannelDescriptor<span class=\"token punctuation\">,</span> onPeerError <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Peer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> config <span class=\"token operator\">*</span>MConnConfig<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>MConnection <span class=\"token punctuation\">{</span>\n    onReceive <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>chID <span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> msgBytes <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        reactor <span class=\"token operator\">:=</span> reactorsByCh<span class=\"token punctuation\">[</span>chID<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> reactor <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> chID <span class=\"token operator\">==</span> PexChannel <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                cmn<span class=\"token punctuation\">.</span><span class=\"token function\">PanicSanity</span><span class=\"token punctuation\">(</span>cmn<span class=\"token punctuation\">.</span><span class=\"token function\">Fmt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown channel %X\"</span><span class=\"token punctuation\">,</span> chID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        reactor<span class=\"token punctuation\">.</span><span class=\"token function\">Receive</span><span class=\"token punctuation\">(</span>chID<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> msgBytes<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    onError <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>r <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">onPeerError</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">NewMConnectionWithConfig</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> chDescs<span class=\"token punctuation\">,</span> onReceive<span class=\"token punctuation\">,</span> onError<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>原来<code class=\"gatsby-code-text\">mconn</code>是<code class=\"gatsby-code-text\">MConnection</code>的实例，它是通过<code class=\"gatsby-code-text\">NewMConnectionWithConfig</code>创建的。</p>\n<p>看了上面的代码，发现这个<code class=\"gatsby-code-text\">MConnectionWithConfig</code>与普通的<code class=\"gatsby-code-text\">net.Conn</code>并没有太大的区别，只不过是当收到了对方发来的数据后，会根据指定的<code class=\"gatsby-code-text\">chID</code>调用相应的<code class=\"gatsby-code-text\">Reactor</code>的<code class=\"gatsby-code-text\">Receive</code>方法来处理。所以它起到了将数据分发给<code class=\"gatsby-code-text\">Reactor</code>的作用。</p>\n<p>为什么需要这样的分发操作呢？这是因为，在比原中，节点之间交换数据，有多种不同的方式：</p>\n<ol>\n<li>一种是规定了详细的数据交互协议（比如有哪些信息类型，分别代表什么意思，什么情况下发哪个，如何应答等），在<code class=\"gatsby-code-text\">ProtocolReactor</code>中实现，它对应的<code class=\"gatsby-code-text\">chID</code>是<code class=\"gatsby-code-text\">BlockchainChannel</code>，值为<code class=\"gatsby-code-text\">byte(0x40)</code></li>\n<li>另一种使用了与BitTorrent类似的文件共享协议，叫<a href=\"https://en.wikipedia.org/wiki/Peer_exchange\">PEX</a>，在<code class=\"gatsby-code-text\">PEXReactor</code>中实现，它对应的<code class=\"gatsby-code-text\">chID</code>是<code class=\"gatsby-code-text\">PexChannel</code>，值为<code class=\"gatsby-code-text\">byte(0x00)</code></li>\n</ol>\n<p>所以节点之间发送信息的时候，需要知道对方发过来的数据对应的是哪一种方式，然后转交给相应的<code class=\"gatsby-code-text\">Reactor</code>去处理。</p>\n<p>在比原中，前者是主要的方式，后者起到辅助作用。我们目前的文章中涉及到的都是前者，后者将在以后专门研究。</p>\n<h3 id=\"pmconntrysend\"><a href=\"#pmconntrysend\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"gatsby-code-text\">p.mconn.TrySend</code></h3>\n<p>当我们知道了<code class=\"gatsby-code-text\">p.mconn.TrySend</code>中的<code class=\"gatsby-code-text\">mconn</code>是什么，并且在什么时候初始化以后，下面就可以进入它的<code class=\"gatsby-code-text\">TrySend</code>方法了。</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/connection.go#L243\">p2p/connection.go#L243</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>MConnection<span class=\"token punctuation\">)</span> <span class=\"token function\">TrySend</span><span class=\"token punctuation\">(</span>chID <span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> msg <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    channel<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>channelsIdx<span class=\"token punctuation\">[</span>chID<span class=\"token punctuation\">]</span>\n    <span class=\"token comment\">// ...</span>\n    ok <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">trySendBytes</span><span class=\"token punctuation\">(</span>wire<span class=\"token punctuation\">.</span><span class=\"token function\">BinaryBytes</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> ok <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Wake up sendRoutine if necessary</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> c<span class=\"token punctuation\">.</span>send <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> ok\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>可以看到，它找到相应的channel后（在这里应该是<code class=\"gatsby-code-text\">ProtocolReactor</code>对应的channel），调用channel的<code class=\"gatsby-code-text\">trySendBytes</code>方法。在发送数据的时候，使用了<code class=\"gatsby-code-text\">github.com/tendermint/go-wire</code>库，将<code class=\"gatsby-code-text\">msg</code>序列化为二进制数组。</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/connection.go#L602\">p2p/connection.go#L602</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">*</span>Channel<span class=\"token punctuation\">)</span> <span class=\"token function\">trySendBytes</span><span class=\"token punctuation\">(</span>bytes <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> ch<span class=\"token punctuation\">.</span>sendQueue <span class=\"token operator\">&lt;-</span> bytes<span class=\"token punctuation\">:</span>\n        atomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddInt32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">.</span>sendQueueSize<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>原来它是把要发送的数据，放到了该channel对应的<code class=\"gatsby-code-text\">sendQueue</code>中，交由别人来发送。具体是由谁来发送，我们马上要就找到它。</p>\n<p>细心的同学会发现，<code class=\"gatsby-code-text\">Channel</code>除了<code class=\"gatsby-code-text\">trySendBytes</code>方法外，还有一个<code class=\"gatsby-code-text\">sendBytes</code>（在本文中没有用上）：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/connection.go#L589\">p2p/connection.go#L589</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">*</span>Channel<span class=\"token punctuation\">)</span> <span class=\"token function\">sendBytes</span><span class=\"token punctuation\">(</span>bytes <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> ch<span class=\"token punctuation\">.</span>sendQueue <span class=\"token operator\">&lt;-</span> bytes<span class=\"token punctuation\">:</span>\n        atomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddInt32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">.</span>sendQueueSize<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">After</span><span class=\"token punctuation\">(</span>defaultSendTimeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>它们两个的区别是，前者尝试把待发送数据<code class=\"gatsby-code-text\">bytes</code>放入<code class=\"gatsby-code-text\">ch.sendQueue</code>时，如果能放进去，则返回<code class=\"gatsby-code-text\">true</code>，否则马上失败，返回<code class=\"gatsby-code-text\">false</code>，所以它是非阻塞的。而后者，如果放不进去（<code class=\"gatsby-code-text\">sendQueue</code>已满，那边还没处理完），则等待<code class=\"gatsby-code-text\">defaultSendTimeout</code>（值为<code class=\"gatsby-code-text\">10</code>秒），然后才会失败。另外，<code class=\"gatsby-code-text\">sendQueue</code>的容量默认为<code class=\"gatsby-code-text\">1</code>。</p>\n<p>到这里，我们其实已经知道比原是如何向其它节点请求区块数据，以及何时把信息发送出去。</p>\n<p>本想在本篇中就把真正发送数据的代码也一起讲了，但是发现它的逻辑也相当复杂，所以就另开一篇讲吧。</p>\n<p>再回到本文问题，再强调一下，我们前面说了，对于向peer请求区块数据，有两种情况：一种是简单的不考虑分叉的，另一种是复杂的考虑分叉的。在本文只考虑了简单的情况，在这种情况下，所谓的<code class=\"gatsby-code-text\">bestHeight</code>就是指的最高的那个区块的高度，而在复杂情况下，它就不一定了。这就留待以后我们再详细讨论，本文的问题就算是回答完毕了。</p>\n<hr>\n<p>如果你觉得这些文章对你非常有用，控制不住想打赏作者，可以有以下选择：</p>\n<ol>\n<li>BTM: <code class=\"gatsby-code-text\">0x6bcCfb7265d4aB0C1a71F7d19b9E581cae73D777</code></li>\n<li>BTC: <code class=\"gatsby-code-text\">1Af2Q23Y1kqgtgbryzjS7RxrnEmyvYuX4b</code></li>\n<li>ETH: <code class=\"gatsby-code-text\">0x6bcCfb7265d4aB0C1a71F7d19b9E581cae73D777</code></li>\n</ol>\n<p>多少请随意，心意最重要，我们一起努力吧！</p>","frontmatter":{"title":"从比原节点拿到区块数据","next":null,"prev":null},"fields":{"path":null,"slug":"docs/bytomanalysis-howto-getdata.html"}}},"pathContext":{"slug":"docs/bytomanalysis-howto-getdata.html"}}