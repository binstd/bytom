{"data":{"markdownRemark":{"html":"<p>在上一篇，我们知道了比原是如何把“请求区块数据”的信息<code class=\"gatsby-code-text\">BlockRequestMessage</code>发送给peer节点的，那么本文研究的重点就是，当peer节点收到了这个信息，它将如何应答？</p>\n<p>那么这个问题如果细分的话，也可以分为三个小问题：</p>\n<ol>\n<li>比原节点是如何收到对方发过来的信息的？</li>\n<li>收到<code class=\"gatsby-code-text\">BlockRequestMessage</code>后，将会给对方发送什么样的信息？</li>\n<li>这个信息是如何发送出去的？</li>\n</ol>\n<p>我们先从第一个小问题开始。</p>\n<h2 id=\"比原节点是如何接收对方发过来的信息的？\"><a href=\"#%E6%AF%94%E5%8E%9F%E8%8A%82%E7%82%B9%E6%98%AF%E5%A6%82%E4%BD%95%E6%8E%A5%E6%94%B6%E5%AF%B9%E6%96%B9%E5%8F%91%E8%BF%87%E6%9D%A5%E7%9A%84%E4%BF%A1%E6%81%AF%E7%9A%84%EF%BC%9F\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>比原节点是如何接收对方发过来的信息的？</h2>\n<p>如果我们在代码中搜索<code class=\"gatsby-code-text\">BlockRequestMessage</code>，会发现只有在<code class=\"gatsby-code-text\">ProtocolReactor.Receive</code>方法中针对该信息进行了应答。那么问题的关键就是，比原是如何接收对方发过来的信息，并且把它转交给<code class=\"gatsby-code-text\">ProtocolReactor.Receive</code>的。</p>\n<p>如果我们对前一篇《比原是如何把请求区块数据的信息发出去的》有印象的话，会记得比原在发送信息时，最后会把信息写入到<code class=\"gatsby-code-text\">MConnection.bufWriter</code>中；与之相应的，<code class=\"gatsby-code-text\">MConnection</code>还有一个<code class=\"gatsby-code-text\">bufReader</code>，用于读取数据，它也是与<code class=\"gatsby-code-text\">net.Conn</code>绑定在一起的：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/connection.go#L114-L118\">p2p/connection.go#L114-L118</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">NewMConnectionWithConfig</span><span class=\"token punctuation\">(</span>conn net<span class=\"token punctuation\">.</span>Conn<span class=\"token punctuation\">,</span> chDescs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>ChannelDescriptor<span class=\"token punctuation\">,</span> onReceive receiveCbFunc<span class=\"token punctuation\">,</span> onError errorCbFunc<span class=\"token punctuation\">,</span> config <span class=\"token operator\">*</span>MConnConfig<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>MConnection <span class=\"token punctuation\">{</span>\n    mconn <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>MConnection<span class=\"token punctuation\">{</span>\n        conn<span class=\"token punctuation\">:</span>        conn<span class=\"token punctuation\">,</span>\n        bufReader<span class=\"token punctuation\">:</span>   bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewReaderSize</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> minReadBufferSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        bufWriter<span class=\"token punctuation\">:</span>   bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewWriterSize</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> minWriteBufferSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></code></pre>\n      </div>\n<p>（其中<code class=\"gatsby-code-text\">minReadBufferSize</code>的值为常量<code class=\"gatsby-code-text\">1024</code>）</p>\n<p>所以，要读取对方发来的信息，一定会读取<code class=\"gatsby-code-text\">bufReader</code>。经过简单的搜索，我们发现，它也是在<code class=\"gatsby-code-text\">MConnection.Start</code>中启动的：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/connection.go#L152-L159\">p2p/connection.go#L152-L159</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>MConnection<span class=\"token punctuation\">)</span> <span class=\"token function\">OnStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">go</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">sendRoutine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">recvRoutine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>其中的<code class=\"gatsby-code-text\">c.recvRoutine()</code>就是我们本次所关注的。它上面的<code class=\"gatsby-code-text\">c.sendRoutine</code>是用来发送的，是前一篇文章中我们关注的重点。</p>\n<p>继续<code class=\"gatsby-code-text\">c.recvRoutine()</code>：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/connection.go#L403-L502\">p2p/connection.go#L403-L502</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>MConnection<span class=\"token punctuation\">)</span> <span class=\"token function\">recvRoutine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        c<span class=\"token punctuation\">.</span>recvMonitor<span class=\"token punctuation\">.</span><span class=\"token function\">Limit</span><span class=\"token punctuation\">(</span>maxMsgPacketTotalSize<span class=\"token punctuation\">,</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">LoadInt64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>RecvRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// ...</span>\n\n        pktType <span class=\"token operator\">:=</span> wire<span class=\"token punctuation\">.</span><span class=\"token function\">ReadByte</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>bufReader<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>err<span class=\"token punctuation\">)</span>\n        c<span class=\"token punctuation\">.</span>recvMonitor<span class=\"token punctuation\">.</span><span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// ...</span>\n\n        <span class=\"token keyword\">switch</span> pktType <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n        <span class=\"token keyword\">case</span> packetTypeMsg<span class=\"token punctuation\">:</span>\n            pkt<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> msgPacket<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n            wire<span class=\"token punctuation\">.</span><span class=\"token function\">ReadBinaryPtr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pkt<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>bufReader<span class=\"token punctuation\">,</span> maxMsgPacketTotalSize<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>err<span class=\"token punctuation\">)</span>\n            c<span class=\"token punctuation\">.</span>recvMonitor<span class=\"token punctuation\">.</span><span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// ...</span>\n            channel<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>channelsIdx<span class=\"token punctuation\">[</span>pkt<span class=\"token punctuation\">.</span>ChannelID<span class=\"token punctuation\">]</span>\n            <span class=\"token comment\">// ...</span>\n            msgBytes<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">recvMsgPacket</span><span class=\"token punctuation\">(</span>pkt<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// ...</span>\n            <span class=\"token keyword\">if</span> msgBytes <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// ...</span>\n                c<span class=\"token punctuation\">.</span><span class=\"token function\">onReceive</span><span class=\"token punctuation\">(</span>pkt<span class=\"token punctuation\">.</span>ChannelID<span class=\"token punctuation\">,</span> msgBytes<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// ...</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>经过简化以后，这个方法分成了三块内容：</p>\n<ol>\n<li>第一块就限制接收速率，以防止恶意结点突然发送大量数据把节点撑死。跟发送一样，它的限制是<code class=\"gatsby-code-text\">500K/s</code></li>\n<li>第二块是从<code class=\"gatsby-code-text\">c.bufReader</code>中读取出下一个数据包的类型。它的值目前有三个，两个跟心跳有关：<code class=\"gatsby-code-text\">packetTypePing</code>和<code class=\"gatsby-code-text\">packetTypePong</code>，另一个表示是正常的信息数据类型<code class=\"gatsby-code-text\">packetTypeMsg</code>，也是我们需要关注的</li>\n<li>第三块就是继续从<code class=\"gatsby-code-text\">c.bufReader</code>中读取出完整的数据包，然后根据它的<code class=\"gatsby-code-text\">ChannelID</code>找到相应的channel去处理它。<code class=\"gatsby-code-text\">ChannelID</code>有两个值，分别是<code class=\"gatsby-code-text\">BlockchainChannel</code>和<code class=\"gatsby-code-text\">PexChannel</code>，我们目前只需要关注前者即可，它对应的reactor是<code class=\"gatsby-code-text\">ProtocolReactor</code>。当最后调用<code class=\"gatsby-code-text\">c.onReceive(pkt.ChannelID, msgBytes)</code>时，读取的二进制数据<code class=\"gatsby-code-text\">msgBytes</code>就会被<code class=\"gatsby-code-text\">ProtocolReactor.Receive</code>处理</li>\n</ol>\n<p>我们的重点是看第三块内容。首先是<code class=\"gatsby-code-text\">channel.recvMsgPacket(pkt)</code>，即通道是怎么从packet包里读取到相应的二进制数据的呢？</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/connection.go#L667-L682\">p2p/connection.go#L667-L682</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">*</span>Channel<span class=\"token punctuation\">)</span> <span class=\"token function\">recvMsgPacket</span><span class=\"token punctuation\">(</span>packet msgPacket<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    ch<span class=\"token punctuation\">.</span>recving <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">.</span>recving<span class=\"token punctuation\">,</span> packet<span class=\"token punctuation\">.</span>Bytes<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> packet<span class=\"token punctuation\">.</span>EOF <span class=\"token operator\">==</span> <span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x01</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        msgBytes <span class=\"token operator\">:=</span> ch<span class=\"token punctuation\">.</span>recving\n        <span class=\"token comment\">// ...</span>\n        ch<span class=\"token punctuation\">.</span>recving <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">.</span>recving<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> msgBytes<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>这个方法我去掉了一些错误检查和关于性能方面的注释，有兴趣的同学可以点接上方的源代码查看，这里就忽略了。</p>\n<p>这段代码主要是利用了一个叫<code class=\"gatsby-code-text\">recving</code>的通道，把<code class=\"gatsby-code-text\">packet</code>中持有的字节数组加到它后面，然后再判断该packet是否代表整个信息结束了，如果是的话，则把<code class=\"gatsby-code-text\">ch.recving</code>的内容完整返回，供调用者处理；否则的话，返回一个<code class=\"gatsby-code-text\">nil</code>，表示还没拿完，暂时处理不了。在前一篇文章中关于发送数据的地方可以与这里对应，只不过发送方要麻烦的多，需要三个通道<code class=\"gatsby-code-text\">sendQueue</code>、<code class=\"gatsby-code-text\">sending</code>和<code class=\"gatsby-code-text\">send</code>才能实现，这边接收方就简单了。</p>\n<p>然后回到前面的方法<code class=\"gatsby-code-text\">MConnection.recvRoutine</code>，我们继续看最后的<code class=\"gatsby-code-text\">c.onReceive</code>调用。这个<code class=\"gatsby-code-text\">onReceive</code>实际上是一个由别人赋值给该channel的一个函数，它位于<code class=\"gatsby-code-text\">MConnection</code>创建的地方：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/peer.go#L292-L310\">p2p/peer.go#L292-L310</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">createMConnection</span><span class=\"token punctuation\">(</span>conn net<span class=\"token punctuation\">.</span>Conn<span class=\"token punctuation\">,</span> p <span class=\"token operator\">*</span>Peer<span class=\"token punctuation\">,</span> reactorsByCh <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">]</span>Reactor<span class=\"token punctuation\">,</span> chDescs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>ChannelDescriptor<span class=\"token punctuation\">,</span> onPeerError <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Peer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> config <span class=\"token operator\">*</span>MConnConfig<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>MConnection <span class=\"token punctuation\">{</span>\n    onReceive <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>chID <span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> msgBytes <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        reactor <span class=\"token operator\">:=</span> reactorsByCh<span class=\"token punctuation\">[</span>chID<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> reactor <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> chID <span class=\"token operator\">==</span> PexChannel <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                cmn<span class=\"token punctuation\">.</span><span class=\"token function\">PanicSanity</span><span class=\"token punctuation\">(</span>cmn<span class=\"token punctuation\">.</span><span class=\"token function\">Fmt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown channel %X\"</span><span class=\"token punctuation\">,</span> chID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        reactor<span class=\"token punctuation\">.</span><span class=\"token function\">Receive</span><span class=\"token punctuation\">(</span>chID<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> msgBytes<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    onError <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>r <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">onPeerError</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">NewMConnectionWithConfig</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> chDescs<span class=\"token punctuation\">,</span> onReceive<span class=\"token punctuation\">,</span> onError<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>逻辑也比较简单，就是当前面的<code class=\"gatsby-code-text\">c.onReceive(pkt.ChannelID, msgBytes)</code>调用时，它会根据传入的<code class=\"gatsby-code-text\">chID</code>找到相应的<code class=\"gatsby-code-text\">Reactor</code>，然后执行其<code class=\"gatsby-code-text\">Receive</code>方法。对于本文来说，就会进入到<code class=\"gatsby-code-text\">ProtocolReactor.Receive</code>。</p>\n<p>那我们继续看<code class=\"gatsby-code-text\">ProtocolReactor.Receive</code>:</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/netsync/protocol_reactor.go#L179-L247\">netsync/protocol_reactor.go#L179-L247</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>pr <span class=\"token operator\">*</span>ProtocolReactor<span class=\"token punctuation\">)</span> <span class=\"token function\">Receive</span><span class=\"token punctuation\">(</span>chID <span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> src <span class=\"token operator\">*</span>p2p<span class=\"token punctuation\">.</span>Peer<span class=\"token punctuation\">,</span> msgBytes <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">DecodeMessage</span><span class=\"token punctuation\">(</span>msgBytes<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">switch</span> msg <span class=\"token operator\">:=</span> msg<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token operator\">*</span>BlockRequestMessage<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>其中的<code class=\"gatsby-code-text\">DecodeMessage(...)</code>就是把传入的二进制数据反序列化成一个<code class=\"gatsby-code-text\">BlockchainMessage</code>对象，该对象是一个没有任何内容的<code class=\"gatsby-code-text\">interface</code>，它有多种实现类型。我们在后面继续对该对象进行判断，如果它是<code class=\"gatsby-code-text\">BlockRequestMessage</code>类型的信息，我们就会继续做相应的处理。处理的代码我在这里暂时省略了，因为它是属于下一个小问题的，我们先不考虑。</p>\n<p>好像不知不觉我们就把第一个小问题的后半部分差不多搞清楚了。那么前半部分是什么？我们在前面说，读取<code class=\"gatsby-code-text\">bufReader</code>的代码的起点是在<code class=\"gatsby-code-text\">MConnection.Start</code>中，那么前半部分就是：比原从启动开始中，是在什么情况下怎样一步步走到<code class=\"gatsby-code-text\">MConnection.Start</code>的呢？</p>\n<p>好在前半部分的问题我们在前一篇文章《比原是如何把请求区块数据的信息发出去的》中进行了专门的讨论，这里就不讲了，有需要的话可以再过去看一下（可以先看最后“总结”那一小节）。</p>\n<p>下面我们进入第二个小问题：</p>\n<h2 id=\"收到blockrequestmessage后，将会给对方发送什么样的信息？\"><a href=\"#%E6%94%B6%E5%88%B0blockrequestmessage%E5%90%8E%EF%BC%8C%E5%B0%86%E4%BC%9A%E7%BB%99%E5%AF%B9%E6%96%B9%E5%8F%91%E9%80%81%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BF%A1%E6%81%AF%EF%BC%9F\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>收到<code class=\"gatsby-code-text\">BlockRequestMessage</code>后，将会给对方发送什么样的信息？</h2>\n<p>这里就是接着前面的<code class=\"gatsby-code-text\">ProtocolReactor.Receive</code>继续向下讲了。首先我们再贴一下它的较完整的代码：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/netsync/protocol_reactor.go#L179-L247\">netsync/protocol_reactor.go#L179-L247</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>pr <span class=\"token operator\">*</span>ProtocolReactor<span class=\"token punctuation\">)</span> <span class=\"token function\">Receive</span><span class=\"token punctuation\">(</span>chID <span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> src <span class=\"token operator\">*</span>p2p<span class=\"token punctuation\">.</span>Peer<span class=\"token punctuation\">,</span> msgBytes <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">DecodeMessage</span><span class=\"token punctuation\">(</span>msgBytes<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token keyword\">switch</span> msg <span class=\"token operator\">:=</span> msg<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token operator\">*</span>BlockRequestMessage<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">var</span> block <span class=\"token operator\">*</span>types<span class=\"token punctuation\">.</span>Block\n        <span class=\"token keyword\">var</span> err <span class=\"token builtin\">error</span>\n        <span class=\"token keyword\">if</span> msg<span class=\"token punctuation\">.</span>Height <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n            block<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> pr<span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">.</span><span class=\"token function\">GetBlockByHeight</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>Height<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            block<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> pr<span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">.</span><span class=\"token function\">GetBlockByHash</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">GetHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// ...</span>\n        response<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">NewBlockResponseMessage</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// ...</span>\n        src<span class=\"token punctuation\">.</span><span class=\"token function\">TrySend</span><span class=\"token punctuation\">(</span>BlockchainChannel<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span> BlockchainMessage <span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>response<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>可以看到，逻辑还是比较简单的，即根据对方发过来的<code class=\"gatsby-code-text\">BlockRequestMessage</code>中指定的<code class=\"gatsby-code-text\">height</code>或者<code class=\"gatsby-code-text\">hash</code>信息，在本地的区块链数据中找到相应的block，组成<code class=\"gatsby-code-text\">BlockResponseMessage</code>发过去就行了。</p>\n<p>其中<code class=\"gatsby-code-text\">chain.GetBlockByHeight(...)</code>和<code class=\"gatsby-code-text\">chain.GetBlockByHash(...)</code>如果详细说明的话，需要深刻理解区块链数据在比原节点中是如何保存的，我们在本文先不讲，等到后面专门研究。</p>\n<p>在这里，我觉得我们只需要知道我们会查询区块数据并且构造出一个<code class=\"gatsby-code-text\">BlockResponseMessage</code>，再通过<code class=\"gatsby-code-text\">BlockchainChannel</code>这个通道发送出去就可以了。</p>\n<p>最后一句代码中调用了<code class=\"gatsby-code-text\">src.TrySend</code>方法，它是把信息向对方peer发送过去。（其中的<code class=\"gatsby-code-text\">src</code>就是指的对方peer）</p>\n<p>那么，它到底是怎么发送出去的呢？下面我们进入最后一个小问题：</p>\n<h2 id=\"这个blockresponsemessage信息是如何发送出去的？\"><a href=\"#%E8%BF%99%E4%B8%AAblockresponsemessage%E4%BF%A1%E6%81%AF%E6%98%AF%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E5%87%BA%E5%8E%BB%E7%9A%84%EF%BC%9F\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>这个<code class=\"gatsby-code-text\">BlockResponseMessage</code>信息是如何发送出去的？</h2>\n<p>我们先看看<code class=\"gatsby-code-text\">peer.TrySend</code>代码：</p>\n<p><a href=\"https://github.com/freewind/bytom-v1.0.1/blob/master/p2p/peer.go#L242-L247\">p2p/peer.go#L242-L247</a></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-go\"><code class=\"gatsby-code-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>Peer<span class=\"token punctuation\">)</span> <span class=\"token function\">TrySend</span><span class=\"token punctuation\">(</span>chID <span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> msg <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">IsRunning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span>mconn<span class=\"token punctuation\">.</span><span class=\"token function\">TrySend</span><span class=\"token punctuation\">(</span>chID<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>它在内部将会调用<code class=\"gatsby-code-text\">MConnection.TrySend</code>方法，其中<code class=\"gatsby-code-text\">chID</code>是<code class=\"gatsby-code-text\">BlockchainChannel</code>，也就是它对应的Reactor是<code class=\"gatsby-code-text\">ProtocolReactor</code>。</p>\n<p>再接着就是我们熟悉的<code class=\"gatsby-code-text\">MConnection.TrySend</code>，由于它在前一篇文章中进行了全面的讲解，在本文就不提了，如果需要可以过去翻看一下。</p>\n<p>那么今天的问题就算是解决啦。</p>\n<p>到这里，我们总算能够完整的理解清楚，当我们向一个比原节点请求“区块数据”，我们这边需要怎么做，对方节点又需要怎么做了。</p>\n<hr>\n<p>如果你觉得这些文章对你非常有用，控制不住想打赏作者，可以有以下选择：</p>\n<ol>\n<li>BTM: <code class=\"gatsby-code-text\">0x6bcCfb7265d4aB0C1a71F7d19b9E581cae73D777</code></li>\n<li>BTC: <code class=\"gatsby-code-text\">1Af2Q23Y1kqgtgbryzjS7RxrnEmyvYuX4b</code></li>\n<li>ETH: <code class=\"gatsby-code-text\">0x6bcCfb7265d4aB0C1a71F7d19b9E581cae73D777</code></li>\n</ol>\n<p>多少请随意，心意最重要，我们一起努力吧！</p>","frontmatter":{"title":"收到“请求区块数据”的信息后如何应答","next":null,"prev":null},"fields":{"path":null,"slug":"docs/bytomanalysis-howto-reply.html"}}},"pathContext":{"slug":"docs/bytomanalysis-howto-reply.html"}}